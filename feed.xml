<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://gregdaynes.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gregdaynes.com/" rel="alternate" type="text/html" /><updated>2025-06-07T19:28:44+00:00</updated><id>https://gregdaynes.com/feed.xml</id><entry><title type="html">Advent of Code 2024 - Day 4</title><link href="https://gregdaynes.com/post/2024/12/04/advent-of-code-day-04.html" rel="alternate" type="text/html" title="Advent of Code 2024 - Day 4" /><published>2024-12-04T18:28:00+00:00</published><updated>2024-12-04T18:28:00+00:00</updated><id>https://gregdaynes.com/post/2024/12/04/advent-of-code-day-04</id><content type="html" xml:base="https://gregdaynes.com/post/2024/12/04/advent-of-code-day-04.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#part-1" id="markdown-toc-part-1">Part 1</a></li>
  <li><a href="#part-2" id="markdown-toc-part-2">Part 2</a></li>
  <li><a href="#cleanup-time" id="markdown-toc-cleanup-time">Cleanup Time</a>    <ul>
      <li><a href="#cleanup-pt-1-first-pass" id="markdown-toc-cleanup-pt-1-first-pass">Cleanup Pt 1: First Pass</a></li>
      <li><a href="#cleanup-pt-1-second-pass" id="markdown-toc-cleanup-pt-1-second-pass">Cleanup Pt 1: Second Pass</a></li>
      <li><a href="#cleanup-pt-1-third-pass" id="markdown-toc-cleanup-pt-1-third-pass">Cleanup Pt 1: Third Pass</a></li>
      <li><a href="#cleanup-pt-1-fourth-pass" id="markdown-toc-cleanup-pt-1-fourth-pass">Cleanup Pt 1: Fourth Pass</a></li>
      <li><a href="#cleanup-pt-1-fifth-pass" id="markdown-toc-cleanup-pt-1-fifth-pass">Cleanup Pt 1: Fifth Pass</a></li>
      <li><a href="#cleanup-pt-2-first-pass" id="markdown-toc-cleanup-pt-2-first-pass">Cleanup Pt 2: First pass</a></li>
      <li><a href="#cleanup-both-parts-final-pass" id="markdown-toc-cleanup-both-parts-final-pass">Cleanup Both Parts: Final Pass</a></li>
    </ul>
  </li>
  <li><a href="#summary--benchmarks" id="markdown-toc-summary--benchmarks">Summary &amp; Benchmarks</a></li>
</ul>

<p>Code for <a href="https://github.com/gregdaynes/advent-of-code-2024/tree/day04">Day 04</a></p>

<p>Today’s challenge is based around matrices, or in JS, 2D arrays and coordinates. This kind of challenge is when I wish there was a better standard library, as well as matrix operations.</p>

<h4 id="part-1">Part 1</h4>

<p>Crossword style challenge
From given input, find all occurrences of XMAS
Can be horizontal, vertical, or diagonal - this includes backwards</p>

<p>Today I decided to think about the problem and write out a plan before coding.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if we turn the input into a 2d array, we can use [x,y] coordinates to find characters
a function to calculate each direction
when converting to 2d array, index all X positions
 for each X
 - take [x,y]
 - compute the horizontal coordinates for each letter M A S - [x+1,y][x+2,y][x+3,y]
 - repeat for direction - should be 8 in total
 - if direction can't be computed - eg: too close to an edge, skip it.
 - test each direction letter coords for a match
 - sum complete matches per X
 sum all matches
</code></pre></div></div>

<p>Makes sense. The next thing to do is remember that coordinates will be in [y,x] not [x,y]. One of those human things where we think horizontally first, whereas the easiest operations are row first. Maybe a transform would be a good brain saving step, but would take more time and memory to perform instead of removing the problem before code - fix the human programmer.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">verticalBackwards</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">upright</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">horizontal</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">downright</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">vertical</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">downleft</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">horizontalBackwards</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">upleft</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]]</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// convert input into 2d array.</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nx">row</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">''</span><span class="p">))</span>

  <span class="c1">// find all X with coords [y,x]</span>
  <span class="kd">const</span> <span class="nx">xMap</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">y</span> <span class="k">in</span> <span class="nx">input2dArray</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">x</span> <span class="k">in</span> <span class="nx">input2dArray</span><span class="p">[</span><span class="nx">y</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">X</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">xMap</span><span class="p">.</span><span class="nf">push</span><span class="p">([</span><span class="nc">Number</span><span class="p">(</span><span class="nx">y</span><span class="p">),</span> <span class="nc">Number</span><span class="p">(</span><span class="nx">x</span><span class="p">)])</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">xValidDirections</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">coord</span> <span class="k">of</span> <span class="nx">xMap</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">allCoords</span> <span class="o">=</span> <span class="p">[</span>
      <span class="nx">verticalBackwards</span><span class="p">,</span>
      <span class="nx">upright</span><span class="p">,</span>
      <span class="nx">horizontal</span><span class="p">,</span>
      <span class="nx">downright</span><span class="p">,</span>
      <span class="nx">vertical</span><span class="p">,</span>
      <span class="nx">downleft</span><span class="p">,</span>
      <span class="nx">horizontalBackwards</span><span class="p">,</span>
      <span class="nx">upleft</span>
    <span class="p">].</span><span class="nf">map</span><span class="p">(</span><span class="nx">fn</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">coord</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="nx">xValidDirections</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">allCoords</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">validDirections</span> <span class="k">of</span> <span class="nx">xValidDirections</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">direction</span> <span class="k">of</span> <span class="nx">validDirections</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">direction</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">word</span> <span class="o">=</span> <span class="nx">direction</span><span class="p">.</span><span class="nf">map</span><span class="p">(([</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">input2dArray</span><span class="p">[</span><span class="nx">y</span><span class="p">]?.[</span><span class="nx">x</span><span class="p">]).</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span>

      <span class="k">if </span><span class="p">(</span><span class="nx">word</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">XMAS</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//console.log(direction, word)</span>
        <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Great, this works and returns the correct result for both sample and actual datasets. Done.</p>

<p>I had notions of guard clauses using yMax and xMax to skip calculating directions that would be clipped by the length, however it was overzealous and broke with sample dataset so I scrapped it before submitting.</p>

<p>Theres lots of loops here, 8 if I’m counting correctly. This can be cleaned up later.</p>

<h4 id="part-2">Part 2</h4>

<p>Of course it wouldn’t be Advent of Code if the second part didn’t crush all your hard work of the first part.</p>

<p>This time the task is to look for X-MAS, which is the word MAS in an X like shape (2 MAS with A in the centre).</p>

<p>Immediately we can scrap the horizontal and vertical checks, meaning we have 4 directions to check.</p>

<p>And we can simplify our operations by changing the starting letter to A. Which allows us to check the immediate 4 coordinates on at the diagonals.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// convert input into 2d array.</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nx">row</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">''</span><span class="p">))</span>

  <span class="kd">const</span> <span class="nx">aMap</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">y</span> <span class="k">in</span> <span class="nx">input2dArray</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">x</span> <span class="k">in</span> <span class="nx">input2dArray</span><span class="p">[</span><span class="nx">y</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">aMap</span><span class="p">.</span><span class="nf">push</span><span class="p">([</span><span class="nc">Number</span><span class="p">(</span><span class="nx">y</span><span class="p">),</span> <span class="nc">Number</span><span class="p">(</span><span class="nx">x</span><span class="p">)])</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">aY</span><span class="p">,</span> <span class="nx">aX</span><span class="p">]</span> <span class="k">of</span> <span class="nx">aMap</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// tl tr br bl</span>
    <span class="kd">const</span> <span class="nx">quadrants</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
    <span class="p">]</span>

    <span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="kd">let</span> <span class="nx">letters</span> <span class="o">=</span> <span class="dl">''</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">]</span> <span class="k">of</span> <span class="nx">quadrants</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">charAtCoord</span> <span class="o">=</span> <span class="nx">input2dArray</span><span class="p">[</span><span class="nx">y</span><span class="p">]?.[</span><span class="nx">x</span><span class="p">]</span>

      <span class="k">if </span><span class="p">([</span><span class="dl">'</span><span class="s1">M</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">S</span><span class="dl">'</span><span class="p">].</span><span class="nf">includes</span><span class="p">(</span><span class="nx">charAtCoord</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">letters</span> <span class="o">+=</span> <span class="nx">charAtCoord</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">letters</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">results</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">letters</span><span class="p">)</span>
    <span class="p">}</span>


    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">possibleMatch</span> <span class="k">of</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">switch </span><span class="p">(</span><span class="nx">possibleMatch</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">MMSS</span><span class="dl">'</span><span class="p">:</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">MSSM</span><span class="dl">'</span><span class="p">:</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">SSMM</span><span class="dl">'</span><span class="p">:</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">SMMS</span><span class="dl">'</span><span class="p">:</span>
          <span class="nx">matches</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">possibleMatch</span><span class="p">)</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="nl">default</span><span class="p">:</span>
          <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">matches</span><span class="p">.</span><span class="nx">length</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Done.</p>

<p>Still a lot of loops like part 1 solution.</p>

<p>Opting for the manually defined quadrants was easier than reusing the functions from part 1.</p>

<p>Because the the results of X-MAS really is looking for positions of M and S around the A, I wrote out the 4 possible permutations of the pattern in order of <code class="language-plaintext highlighter-rouge">top left, top right, bottom right, bottom left</code>.</p>

<p>This makes a switch to patch each set of found letters a pretty good use case. I don’t see a way to make this easier. But if we were looking for more letters, or the other 4 cardinal directions, this would be a more painful. Luckily, we can keep it simple. The hope and dream of call code.</p>

<h3 id="cleanup-time">Cleanup Time</h3>

<p>Those loops will keep me up at night if they’re not reduced at least a little.</p>

<p>Starting with Part 1, lets sort some things out.</p>

<h4 id="cleanup-pt-1-first-pass">Cleanup Pt 1: First Pass</h4>

<p>Instead of generating coordinates, and then going through each set to find the letter, then going through each set to check the word - we can check the word in the first pass. It still requires looking up each letter, but now its done in 1 loop.</p>

<p>This introduces a gastly amount of bloat to each of the direction functions</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">verticalBackwards</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">lookups</span> <span class="o">=</span> <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="p">]]</span>

  <span class="kd">let</span> <span class="nx">word</span> <span class="o">=</span> <span class="dl">''</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">]</span> <span class="k">of</span> <span class="nx">lookups</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">word</span> <span class="o">+=</span> <span class="nx">input</span><span class="p">[</span><span class="nx">y</span><span class="p">]?.[</span><span class="nx">x</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="k">if </span><span class="p">(</span><span class="nx">word</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">XMAS</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">word</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// rest of them skipped for brevity.</span>
</code></pre></div></div>

<p>Now we receive the word if it matches, or undefined if not.</p>

<p>Next I extracted the input to 2d array parser to a function (light code resuse, also so I don’t have to look at it). And then did the same with the map creation for a specific letter. These are not performance oriented operations, they’re still the same operations.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">findallLetterCoordiates</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="dl">'</span><span class="s1">X</span><span class="dl">'</span><span class="p">)</span>

  <span class="kd">const</span> <span class="nx">validWords</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">coord</span> <span class="k">of</span> <span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">validWord</span> <span class="o">=</span> <span class="p">[</span>
      <span class="nx">verticalBackwards</span><span class="p">,</span>
      <span class="nx">upright</span><span class="p">,</span>
      <span class="nx">horizontal</span><span class="p">,</span>
      <span class="nx">downright</span><span class="p">,</span>
      <span class="nx">vertical</span><span class="p">,</span>
      <span class="nx">downleft</span><span class="p">,</span>
      <span class="nx">horizontalBackwards</span><span class="p">,</span>
      <span class="nx">upleft</span>
    <span class="p">].</span><span class="nf">map</span><span class="p">(</span><span class="nx">fn</span> <span class="o">=&gt;</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="nx">coord</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">)</span>

    <span class="nx">validWords</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">validWord</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">validWords</span><span class="p">.</span><span class="nf">flat</span><span class="p">().</span><span class="nx">length</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The solver drops a for loop and a nested loop, but does gain a filter, and flat(), simpler operations are better right?</p>

<h4 id="cleanup-pt-1-second-pass">Cleanup Pt 1: Second Pass</h4>

<p>This time instead of mapping and filtering, and appending words to an array, flattening, and then counting, we can increment a counter if the we receive a result from the map.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">findallLetterCoordiates</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="dl">'</span><span class="s1">X</span><span class="dl">'</span><span class="p">)</span>

  <span class="kd">const</span> <span class="nx">fns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">verticalBackwards</span><span class="p">,</span>
    <span class="nx">upright</span><span class="p">,</span>
    <span class="nx">horizontal</span><span class="p">,</span>
    <span class="nx">downright</span><span class="p">,</span>
    <span class="nx">vertical</span><span class="p">,</span>
    <span class="nx">downleft</span><span class="p">,</span>
    <span class="nx">horizontalBackwards</span><span class="p">,</span>
    <span class="nx">upleft</span>
  <span class="p">]</span>

  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">coord</span> <span class="k">of</span> <span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fns</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">fn</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nf">fn</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="nx">coord</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In addition to removing filter, push, flat, length, I opted to hoist the functions list outside of the loop. It won’t save much but nice to not have it redefined for each root letter.</p>

<h4 id="cleanup-pt-1-third-pass">Cleanup Pt 1: Third Pass</h4>

<p>Reducers, the bane of any developer (save for intermediates. JUST KIDDING! you all do the important and necessary work, do it how you need to get it done).</p>

<p>It’s commonplace to dislike reducers due to their syntax and the complexity understanding them involves. In this case, it is much more cryptic than the for loop with accumulator, but internally is small enough that it should be reasonable to keep in mind. A little more complexity can sometimes be worth it.</p>

<p>In this case, the reducer is slightly faster than previous implementations, so a worthwhile tradeoff.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">findallLetterCoordiates</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="dl">'</span><span class="s1">X</span><span class="dl">'</span><span class="p">)</span>

  <span class="kd">const</span> <span class="nx">fns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">verticalBackwards</span><span class="p">,</span>
    <span class="nx">upright</span><span class="p">,</span>
    <span class="nx">horizontal</span><span class="p">,</span>
    <span class="nx">downright</span><span class="p">,</span>
    <span class="nx">vertical</span><span class="p">,</span>
    <span class="nx">downleft</span><span class="p">,</span>
    <span class="nx">horizontalBackwards</span><span class="p">,</span>
    <span class="nx">upleft</span>
  <span class="p">]</span>

  <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">map</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">coord</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">fns</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">fn</span> <span class="o">=&gt;</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="nx">coord</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">acc</span><span class="o">++</span><span class="p">)</span>

    <span class="k">return</span> <span class="nx">acc</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">)</span>

  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="cleanup-pt-1-fourth-pass">Cleanup Pt 1: Fourth Pass</h4>

<p>It’s time to replace those functions with all the repeat word === XMAS logic.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">matrix</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// verticalBackwards</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// upright</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// horizontal</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// downright</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// vertical</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// downleft</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// horizontalBackwards</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// upleft</span>
  <span class="p">]</span>

  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">lookups</span> <span class="k">of</span> <span class="nx">matrix</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">word</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">]</span> <span class="k">of</span> <span class="nx">lookups</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">word</span> <span class="o">+=</span> <span class="nx">input</span><span class="p">[</span><span class="nx">y</span><span class="p">]?.[</span><span class="nx">x</span><span class="p">]</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">word</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">XMAS</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">count</span><span class="o">++</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This isn’t “better” but it is dry-er (Remember, DRY is ok sometimes).</p>

<p>What is nice about this change, is we can return the count from this function, removing the need to count in the caller. A little bit of encapsulation never hurt.</p>

<p>So now the solver looks like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nf">p1a</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">findallLetterCoordiates</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="dl">'</span><span class="s1">X</span><span class="dl">'</span><span class="p">)</span>

  <span class="k">return</span> <span class="nx">map</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">coord</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+=</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="nx">coord</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Well isn’t that nice to look at. With all the scary things hidden away.</p>

<h4 id="cleanup-pt-1-fifth-pass">Cleanup Pt 1: Fifth Pass</h4>

<p>Let’s take it one step further.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">countValidWordsForCoord</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">matrix</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// verticalBackwards</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// upright</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// horizontal</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// downright</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// vertical</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// downleft</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span>   <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>  <span class="p">],</span> <span class="c1">// horizontalBackwards</span>
    <span class="p">[[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="nx">y</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">x</span><span class="o">-</span><span class="mi">3</span><span class="p">]],</span> <span class="c1">// upleft</span>
  <span class="p">]</span>

  <span class="c1">// returns count of valid words</span>
  <span class="k">return</span> <span class="nx">matrix</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">coords</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">acc</span> <span class="o">+=</span> <span class="p">(</span><span class="nf">wordFromCoords</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">coords</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">XMAS</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// returns a string of letters from coordinates, eg: XMAS</span>
<span class="kd">function</span> <span class="nf">wordFromCoords</span> <span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">coords</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// destructuring coord into [y, x] is slower than coord[0], coord[1] looups</span>
  <span class="k">return</span> <span class="nx">coords</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">coord</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">input</span><span class="p">[</span><span class="nx">coord</span><span class="p">[</span><span class="mi">0</span><span class="p">]]?.[</span><span class="nx">coord</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span> <span class="dl">''</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">p1a</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">findallLetterCoordiates</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="dl">'</span><span class="s1">X</span><span class="dl">'</span><span class="p">)</span>

  <span class="k">return</span> <span class="nx">map</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">coord</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">acc</span> <span class="o">+=</span> <span class="nf">countValidWordsForCoord</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="nx">coord</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Introducing yet another reducer is not pleasant here, but makes the count function a little shorter - but now we have to jump around, so ergonomics and complexity are worse, but code is less. This does not seem like a valid trade off.</p>

<p>Something that came out of this is the removal of destructuring, which turns out to be quite a bit slower than direct access through index. But is worse for readability, so, use where appropriate - like optimization steps of proven code.</p>

<p>I think that’s enough reworking of Part 1’s solver.</p>

<h4 id="cleanup-pt-2-first-pass">Cleanup Pt 2: First pass</h4>

<p>First order of business is to replace [‘M’, ‘S’].includes check with direct === ‘M’ === ‘S’ checks which are faster for 2 entries.</p>

<p>Next I questioned why do filtering at all instead of just appending any value (including <code class="language-plaintext highlighter-rouge">undefined</code>) to the string of letters. The switch is pattern matching is simple, so we can remove the string preparations.</p>

<p>This meant we could remove the results and count checks and within the switch body update count instead of accumulating words, and checking length later.</p>

<p>Using a reducer to accumulate the letters is short and simple enough so I think it’s ok here (especially compared to the Pt 1 reducers).</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">findallLetterCoordiates</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">)</span>

  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">aY</span><span class="p">,</span> <span class="nx">aX</span><span class="p">]</span> <span class="k">of</span> <span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// tl tr br bl</span>
    <span class="kd">const</span> <span class="nx">quadrants</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
      <span class="p">[</span><span class="nx">aY</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">aX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
    <span class="p">]</span>

    <span class="kd">const</span> <span class="nx">letters</span> <span class="o">=</span> <span class="nx">quadrants</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">coord</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">input2dArray</span><span class="p">[</span><span class="nx">coord</span><span class="p">[</span><span class="mi">0</span><span class="p">]]?.[</span><span class="nx">coord</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
    <span class="p">},</span> <span class="dl">''</span><span class="p">)</span>

    <span class="k">switch </span><span class="p">(</span><span class="nx">letters</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="dl">'</span><span class="s1">MMSS</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">case</span> <span class="dl">'</span><span class="s1">MSSM</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">case</span> <span class="dl">'</span><span class="s1">SSMM</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">case</span> <span class="dl">'</span><span class="s1">SMMS</span><span class="dl">'</span><span class="p">:</span>
        <span class="nx">count</span><span class="o">++</span>
      <span class="k">default</span><span class="p">:</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Less loops, cleaner syntax, even with the cognitive cost of the reducer. It also performs much faster (2-3x by rough test speed)</p>

<h4 id="cleanup-both-parts-final-pass">Cleanup Both Parts: Final Pass</h4>

<p>Last thing that was bugging me was performing the input to 2d array, then iterating the matrix to find coordinates of target letters. This can be reduced to being done inline with the creation of the 2d array, where the lookups are only done against the length of each row.</p>

<p>This doesn’t really change performance on either dataset, but is less code, so maybe that is a win for maintainability.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">parseInputToArray</span> <span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="kd">const</span> <span class="nx">matrix</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">).</span><span class="nf">map</span><span class="p">((</span><span class="nx">row</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">letters</span> <span class="o">=</span> <span class="nx">row</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span>

    <span class="nx">letters</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">letter</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">letter</span> <span class="o">===</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">map</span><span class="p">.</span><span class="nf">push</span><span class="p">([</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">])</span>
      <span class="p">}</span>
    <span class="p">})</span>

    <span class="k">return</span> <span class="nx">letters</span>
  <span class="p">})</span>

  <span class="k">return</span> <span class="p">[</span><span class="nx">matrix</span><span class="p">,</span> <span class="nx">map</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So now each parts solver can skip</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">input2dArray</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nf">findallLetterCoordiates</span><span class="p">(</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<p>And do this instead</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">input2dArray</span><span class="p">,</span> <span class="nx">map</span><span class="p">]</span> <span class="o">=</span> <span class="nf">parseInputToArray</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="summary--benchmarks">Summary &amp; Benchmarks</h3>

<p>Approaching with a plan, and remembering the pain around [y,x] from previous work (especially game dev), made today’s challenge a breeze.</p>

<p>I know there are branches of mathematics and well defined algorithms that make working with coordinate data easier, and faster, but I can’t remember them, and also chose to not look it up.</p>

<p>Performance of the first implementations left a lot to be desired</p>

<table>
  <thead>
    <tr>
      <th>part</th>
      <th>time (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1) sample data</td>
      <td>1.798084</td>
    </tr>
    <tr>
      <td>1) actual data</td>
      <td>25.352125</td>
    </tr>
    <tr>
      <td>2) sample data</td>
      <td>0.760792</td>
    </tr>
    <tr>
      <td>2) actual data</td>
      <td>3.878375</td>
    </tr>
  </tbody>
</table>

<p>Overall not bad, but 25ms operation in Game dev means you’re at best getting 30fps - not good.</p>

<p>After cleanup and optimizations</p>

<table>
  <thead>
    <tr>
      <th>part</th>
      <th>time (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1) sample data</td>
      <td>1.280416</td>
    </tr>
    <tr>
      <td>1) actual data</td>
      <td>7.645583</td>
    </tr>
    <tr>
      <td>2) sample data</td>
      <td>0.319542</td>
    </tr>
    <tr>
      <td>2) actual data</td>
      <td>2.491416</td>
    </tr>
  </tbody>
</table>

<p>Look at that, actual data for Part 1 is 1/3 the of the original, and Part 2 is 2/3 of the original.</p>

<p>I’m sure with more efficient matrix operations all of these could be done in under 1ms. But I’m not doing that today.</p>]]></content><author><name></name></author><category term="post" /><category term="aoc" /><category term="nodejs" /></entry><entry><title type="html">Advent of Code 2024 - Day 3</title><link href="https://gregdaynes.com/post/2024/12/03/advent-of-code-day-03.html" rel="alternate" type="text/html" title="Advent of Code 2024 - Day 3" /><published>2024-12-03T05:27:00+00:00</published><updated>2024-12-03T05:27:00+00:00</updated><id>https://gregdaynes.com/post/2024/12/03/advent-of-code-day-03</id><content type="html" xml:base="https://gregdaynes.com/post/2024/12/03/advent-of-code-day-03.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#part-1" id="markdown-toc-part-1">Part 1</a></li>
  <li><a href="#part-2" id="markdown-toc-part-2">Part 2</a></li>
</ul>

<p>Code for <a href="https://github.com/gregdaynes/advent-of-code-2024/tree/day03">Day 03</a></p>

<p>Wow. After Day 2 pt 2, I was sure I’d be cooked and not be able to continue on. Oh how wrong Greg from a 4 hours ago was.</p>

<p>Today’s challenge involves filtering through “corrupted data” looking for recognizable operations and performing them.</p>

<p>I didn’t even bother with a separate file, instead wrote each solver in tests.</p>

<h4 id="part-1">Part 1</h4>

<p>For part 1 - the only operation needed is <code class="language-plaintext highlighter-rouge">mul(x,y)</code> - X and Y are numbers to multiply together. Then summing the product.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">pt1 sample dataset</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="s2">`xmul(2,4)%&amp;mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))`</span>
  <span class="kd">const</span> <span class="nx">matcher</span> <span class="o">=</span> <span class="sr">/mul</span><span class="se">\((?&lt;</span><span class="sr">a&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">,</span><span class="se">(?&lt;</span><span class="sr">b&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)\)</span><span class="sr">/gm</span>
  <span class="kd">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">matcher</span><span class="p">)</span>

  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">match</span> <span class="k">of</span> <span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">group</span> <span class="o">=</span> <span class="nx">match</span><span class="p">.</span><span class="nx">groups</span>

    <span class="nx">sum</span> <span class="o">=</span> <span class="nx">sum</span> <span class="o">+</span> <span class="p">(</span><span class="nc">Number</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span> <span class="o">*</span> <span class="nc">Number</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">b</span><span class="p">))</span>
  <span class="p">}</span>

  <span class="nx">assert</span><span class="p">.</span><span class="nf">equal</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="mi">188192787</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>If you know RegEx the solution is easy. We can use it to find the data to multiply together as groups and then iterate over the iterator collections adding up the multiplications.</p>

<h4 id="part-2">Part 2</h4>

<p>Part 2 introduced 2 new “uncorrupted” operations to pay attention to.</p>

<p><code class="language-plaintext highlighter-rouge">don't()</code> and <code class="language-plaintext highlighter-rouge">do()</code></p>

<p>They act as flags to disable and enable future operations.</p>

<p>The default state is to perform the operations</p>

<p>We can think in terms of <em>gating</em> or <em>switching</em> to understand the logic.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">pt2 sample dataset</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="s2">`xmul(2,4)&amp;mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))`</span>

  <span class="kd">const</span> <span class="nx">matcher</span> <span class="o">=</span> <span class="sr">/</span><span class="se">(</span><span class="sr">mul</span><span class="se">\((?&lt;</span><span class="sr">a&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">,</span><span class="se">(?&lt;</span><span class="sr">b&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)\)</span><span class="sr">|</span><span class="se">(?&lt;</span><span class="sr">dont&gt;don't</span><span class="se">\(\))</span><span class="sr">|</span><span class="se">(?&lt;</span><span class="sr">do&gt;do</span><span class="se">\(\)))</span><span class="sr">/gm</span>
  <span class="kd">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">matcher</span><span class="p">)</span>

  <span class="kd">let</span> <span class="nx">enabled</span> <span class="o">=</span> <span class="kc">true</span>

  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">match</span> <span class="k">of</span> <span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">group</span> <span class="o">=</span> <span class="nx">match</span><span class="p">.</span><span class="nx">groups</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">dont</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">enabled</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="k">continue</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="k">do</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">enabled</span> <span class="o">=</span> <span class="kc">true</span>
      <span class="k">continue</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">enabled</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">sum</span> <span class="o">=</span> <span class="nx">sum</span> <span class="o">+</span> <span class="p">(</span><span class="nc">Number</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span> <span class="o">*</span> <span class="nc">Number</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">b</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">assert</span><span class="p">.</span><span class="nf">equal</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>An adjustment to the RegEx from Part 1 is needed</p>

<ol>
  <li>Wrapping the whole matcher in a group</li>
  <li>Use <code class="language-plaintext highlighter-rouge">|</code> to define alternate group matchers for <code class="language-plaintext highlighter-rouge">don't()</code> and <code class="language-plaintext highlighter-rouge">do()</code></li>
</ol>

<p>This gives a Regex pattern that has 3 possible matches for the group.</p>

<p>Once the matcher is run against the input, the output is an iterator with each group in sequence. Meaning there will be either a <code class="language-plaintext highlighter-rouge">mul</code>, <code class="language-plaintext highlighter-rouge">don't()</code>, <code class="language-plaintext highlighter-rouge">do()</code> in each step of the iterator, sequentially matching the input.</p>

<ol>
  <li>Starting with <code class="language-plaintext highlighter-rouge">mul</code> enabled</li>
  <li>Step through each match</li>
  <li>If enabled === <code class="language-plaintext highlighter-rouge">true</code> and  the match is <code class="language-plaintext highlighter-rouge">mul</code> - perform multiplication and add the product to the sum</li>
  <li>If the match is <code class="language-plaintext highlighter-rouge">don't()</code> set enabled to false</li>
  <li>If the match is <code class="language-plaintext highlighter-rouge">do</code> set enabled to true</li>
</ol>

<hr />

<p>This code is <em>easy</em> enough to understand without much documentation on the operations that someone without regex experience should be able to understand and alter (assuming they do not look at the matcher). However the regex itself is also easy to understand, that a quick visit to <a href="https://regex101.com/r/Km0QEM/1">Regex101</a> will describe it in detail and provide a playground to test against.</p>

<p>Overall, I feel relieved and elated that Day 3 challenge wasn’t such a struggle as Day 2.</p>

<p>Takeaway from today</p>

<p><strong>ALWAYS BET ON REGEX</strong></p>

<p>(unless to parse email, then avoid.)</p>]]></content><author><name></name></author><category term="post" /><category term="aoc" /><category term="nodejs" /></entry><entry><title type="html">Advent of Code 2024 - Day 2</title><link href="https://gregdaynes.com/post/2024/12/03/advent-of-code-day-02.html" rel="alternate" type="text/html" title="Advent of Code 2024 - Day 2" /><published>2024-12-03T01:35:00+00:00</published><updated>2024-12-03T01:35:00+00:00</updated><id>https://gregdaynes.com/post/2024/12/03/advent-of-code-day-02</id><content type="html" xml:base="https://gregdaynes.com/post/2024/12/03/advent-of-code-day-02.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#my-solution" id="markdown-toc-my-solution">My solution</a></li>
</ul>

<p>Code for <a href="https://github.com/gregdaynes/advent-of-code-2024/tree/day02">Day 02</a></p>

<p>I’ll be honest, this one broke me. Part 1 was easy, but part two came in and just stomped on everything.</p>

<p>I almost gave up. I did a few times throughout the day.</p>

<p>I also cheated by going through reddit for more edge cases to test.</p>

<p>Which in the end may not have been necessary. It turns out, even though my downloaded data looked clean, I didn’t run <code class="language-plaintext highlighter-rouge">.trim</code> on it before processing, which lead to overcounting the safe reports by 1.</p>

<p>Starting off with a good reminder.</p>

<p><strong>CLEAN YOUR DATA FIRST</strong></p>

<p>It may look clean, and if you’re dealing with line based data, always trim off empty lines.</p>

<h3 id="my-solution">My solution</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">reports</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">)</span>

  <span class="kd">function</span> <span class="nf">isValid</span> <span class="p">(</span><span class="nx">levels</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">inc</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="kd">let</span> <span class="nx">dec</span> <span class="o">=</span> <span class="kc">true</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">levels</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">levels</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
      <span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">levels</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

      <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">c</span> <span class="o">&lt;</span> <span class="nx">n</span> <span class="o">&amp;&amp;</span> <span class="nx">n</span> <span class="o">&lt;=</span> <span class="nx">c</span> <span class="o">+</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">inc</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="p">}</span>

      <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">c</span> <span class="o">&gt;</span> <span class="nx">n</span> <span class="o">&amp;&amp;</span> <span class="nx">n</span> <span class="o">&gt;=</span> <span class="nx">c</span> <span class="o">-</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">dec</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">inc</span> <span class="o">||</span> <span class="nx">dec</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span>

    <span class="k">return</span> <span class="kc">false</span>
  <span class="p">}</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">report</span> <span class="k">in</span> <span class="nx">reports</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">levels</span> <span class="o">=</span> <span class="nx">reports</span><span class="p">[</span><span class="nx">report</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nb">Number</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">safe</span> <span class="o">=</span> <span class="kc">true</span>

    <span class="kd">let</span> <span class="nx">arrays</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">levels</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">levelsClone</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">levels</span><span class="p">]</span>
      <span class="nx">levelsClone</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
      <span class="nx">arrays</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">levelsClone</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nx">arrays</span> <span class="o">=</span> <span class="nx">arrays</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">isValid</span><span class="p">).</span><span class="nf">filter</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">)</span>

    <span class="c1">//we need at least 1 valid set of levels</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">arrays</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="nx">safe</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="nx">reports</span><span class="p">[</span><span class="nx">report</span><span class="p">]</span> <span class="o">=</span> <span class="nx">safe</span>
  <span class="p">}</span>

  <span class="c1">// return made safe report count</span>
  <span class="k">return</span> <span class="nx">reports</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">item</span> <span class="p">?</span> <span class="nx">acc</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="nx">acc</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>What’s incredibly frustrating about this challenge, is that the way to do it is through brute-force. I can’t imagine any other way to handle it. And the brute-force approach is tedious at best.</p>

<p>I wouldn’t want to inherit this code, even with substantial tests and documentation. It would likely become marked with here-be-dragons and I would dread needing to make any change. It’s brittle, and has a high cognitive load.</p>]]></content><author><name></name></author><category term="post" /><category term="aoc" /><category term="nodejs" /></entry><entry><title type="html">Advent of Code 2024 - Day 1</title><link href="https://gregdaynes.com/post/2024/12/01/advent-of-code-day-01.html" rel="alternate" type="text/html" title="Advent of Code 2024 - Day 1" /><published>2024-12-01T15:45:00+00:00</published><updated>2024-12-01T15:45:00+00:00</updated><id>https://gregdaynes.com/post/2024/12/01/advent-of-code-day-01</id><content type="html" xml:base="https://gregdaynes.com/post/2024/12/01/advent-of-code-day-01.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#solving-day-1" id="markdown-toc-solving-day-1">Solving Day 1</a>    <ul>
      <li><a href="#day-1-part-1" id="markdown-toc-day-1-part-1">Day 1: Part 1</a>        <ul>
          <li><a href="#first-pass" id="markdown-toc-first-pass">First Pass</a></li>
          <li><a href="#second-pass" id="markdown-toc-second-pass">Second Pass</a></li>
        </ul>
      </li>
      <li><a href="#day-1-part-2" id="markdown-toc-day-1-part-2">Day 1: Part 2</a>        <ul>
          <li><a href="#first-pass-1" id="markdown-toc-first-pass-1">First pass</a></li>
          <li><a href="#second-pass-1" id="markdown-toc-second-pass-1">Second pass</a></li>
          <li><a href="#third-pass" id="markdown-toc-third-pass">Third Pass</a></li>
          <li><a href="#fourth-pass" id="markdown-toc-fourth-pass">Fourth pass</a></li>
          <li><a href="#fifth-pass-for-funzies" id="markdown-toc-fifth-pass-for-funzies">Fifth pass (for funzies)</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#summary--timings" id="markdown-toc-summary--timings">Summary &amp; Timings</a>    <ul>
      <li><a href="#additional-findings" id="markdown-toc-additional-findings">Additional Findings</a></li>
    </ul>
  </li>
</ul>

<h3 id="introduction">Introduction</h3>

<p>Each time Advent of Code comes around, I have the intention of participating, read the first puzzle, maybe solve it and then forget to continue through the rest.</p>

<p>There’s a few culprits to my abandonment.</p>

<ul>
  <li><em>Attention</em>; usually work or other tasks get in the way.</li>
  <li><em>Steep Cliff</em>; the puzzles are a wall of text that I find intimidating.</li>
  <li><em>Imposter Syndrome</em>; I’m not good enough to do it good so I shouldn’t do it at all.</li>
  <li><em>Learning languages</em>; I tend to want to pick up a new language, but get distracted by learning it instead of applying as I’m going.</li>
  <li>But it’s mostly work and free time.</li>
</ul>

<p>This year is different. It overlaps with funemployment! Which means I don’t have much preventing me from bashing out some terrible solutions.</p>

<p>As solutions to the above:</p>

<ul>
  <li>I am going to do it in NodeJS, removing the language distraction.</li>
  <li>Wall of text; behavioural changes are hard, reading comprehension on meandering text is a struggle. Perhaps a symptom of an undiagnosed attention problem.
Instead of trying to find problem solving algorithms; start with solving the problem. Make it better. Maybe an algorithm will emerge, this is practice and should be fun. So have at it!</li>
</ul>

<h3 id="solving-day-1">Solving Day 1</h3>

<p>Code for <a href="https://github.com/gregdaynes/advent-of-code-2024/tree/day01">Day 01</a></p>

<h4 id="day-1-part-1">Day 1: Part 1</h4>

<p>Given an input with 2 columns of numbers (2 numbers per line).
Find the distance between the first lowest of each column.
Find the distance between the second lowest of each column.
Repeat for each set of numbers.
Return the sum of the distances.</p>

<hr />

<h5 id="first-pass">First Pass</h5>

<p>Bash out a solution, improve later.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">pairs</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">)</span>

  <span class="kd">const</span> <span class="nx">leftCollection</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">const</span> <span class="nx">rightCollection</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">pair</span> <span class="k">of</span> <span class="nx">pairs</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pair</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">   </span><span class="dl">'</span><span class="p">)</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">left</span> <span class="o">||</span> <span class="o">!</span><span class="nx">right</span><span class="p">)</span> <span class="k">continue</span>

    <span class="nx">leftCollection</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>
    <span class="nx">rightCollection</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">leftCollection</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
  <span class="nx">rightCollection</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>

  <span class="kd">let</span> <span class="nx">distanceAcc</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">while</span><span class="p">(</span><span class="nx">leftCollection</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">distanceAcc</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span>
      <span class="nx">leftCollection</span><span class="p">.</span><span class="nf">shift</span><span class="p">()</span> <span class="o">-</span> <span class="nx">rightCollection</span><span class="p">.</span><span class="nf">shift</span><span class="p">()</span>
    <span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">distanceAcc</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is awful, doesn’t scale well, but does solve the problem.</p>

<p>The first offence is splitting the input on new line into an array. Already we’ve introduced memory issues - what if the input in many GBs? Looking at the known inputs, we’re safe, so we don’t have to be proactive (or defensive) here. If this was real-life code, I’d want more samples, or at least ask what the maximum size will be.</p>

<p>Next are the creation of 2 arrays - seems harmless. Paired with iterating the split array, performing a split on each entry and then putting the values into the corresponding array is probably fine.</p>

<p>We then sort each array as a mutation. This could be done without the mutation, but we’d double up memory again. So now we have input string, input array, left array, right array.  We’ve iterated each array at once, meaning we’ve done 3*n operations.</p>

<p>Finally looping over all items in the left array, but doing another mutation of both left and right to get the first entries each step. Knowing javascript array mutation isn’t the fastest, a better option would probably be to reverse the sort direction so lowest value is last and then using pop instead of shift to remove the entry.</p>

<h5 id="second-pass">Second Pass</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function solve (input) {
  const regex = /(?&lt;left&gt;\d+)\s+(?&lt;right&gt;\d+)/gm

  const Left = []
  const Right = []

  ;[...input.matchAll(regex)]
    .forEach(({  groups: { left, right } }) =&gt; {
      Left.push(left)
      Right.push(right)
    })

  Left.sort()
  Right.sort()

  let distanceAcc = 0

  for (const i in Left) {
    distanceAcc = distanceAcc + Math.abs(Left[i] - Right[i])
  }

  return distanceAcc
}
</code></pre></div></div>

<p>A bit better.</p>

<p>Instead of splitting the input into an array based on new lines, and then iterating each line and splitting based on separator, Regex gives us the ability grab each number on each line directly. There is still the input size problem, but can ignore it based on what we know.</p>

<p>We still have the 2 arrays, and the sorting problem - I don’t see a way out of it.</p>

<p>Iteration to create the sum is no longer in a while loop - this doesn’t really matter.</p>

<p>No longer mutating the arrays, instead using the index of the loop to lookup the values. Seems fine.</p>

<p><em>If input happened to be too much to hold in memory, NodeJS FileSystem Readline stream would be a good approach. The regex is still usable, but doesn’t need to be multi-line</em></p>

<p>Rough timing through <code class="language-plaintext highlighter-rouge">node:test</code> reveals the <code class="language-plaintext highlighter-rouge">second pass</code> is slightly faster.</p>

<table>
  <thead>
    <tr>
      <th>pass</th>
      <th>time (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1: sample dataset</td>
      <td>0.526166</td>
    </tr>
    <tr>
      <td>2: sample dataset</td>
      <td>0.192042</td>
    </tr>
    <tr>
      <td>1: actual dataset</td>
      <td>1.409791</td>
    </tr>
    <tr>
      <td>2: actual dataset</td>
      <td>1.182459</td>
    </tr>
  </tbody>
</table>

<p>Just over 1ms to work through 1000 rows of numbers isn’t exactly performant. But good enough.</p>

<h4 id="day-1-part-2">Day 1: Part 2</h4>

<p>Same as part 1, except instead summing distances between the numbers.
Score the lowest number in the left column through multiplication of the occurrances in the right.
Finally sum the scores.</p>

<h5 id="first-pass-1">First pass</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/</span><span class="se">(?&lt;</span><span class="sr">left&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)\s</span><span class="sr">+</span><span class="se">(?&lt;</span><span class="sr">right&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">/gm</span>

  <span class="kd">const</span> <span class="nx">Left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">const</span> <span class="nx">Right</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="p">;[...</span><span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">regex</span><span class="p">)]</span>
    <span class="p">.</span><span class="nf">forEach</span><span class="p">(({</span>  <span class="na">groups</span><span class="p">:</span> <span class="p">{</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="p">}</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">Left</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>
      <span class="nx">Right</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
    <span class="p">})</span>

  <span class="kd">let</span> <span class="nx">similarity</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">left</span> <span class="k">of</span> <span class="nx">Left</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">occurrances</span> <span class="o">=</span> <span class="nx">Right</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">right</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">left</span> <span class="o">===</span> <span class="nx">right</span><span class="p">).</span><span class="nx">length</span>
    <span class="nx">similarity</span> <span class="o">+=</span> <span class="nx">left</span> <span class="o">*</span> <span class="nx">occurrances</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">similarity</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Chuffed with the regex solution for creating two arrays of numbers, I will keep that.</p>

<p>Scoring iterates over the left array and uses Array.filter to produce a new array of matching values. Taking the size of resulting array and doing the scoring. Back to iterating each array many times. Seems fine with the test dataset, but actual dataset is very slow.</p>

<p>This can be improved.</p>

<h5 id="second-pass-1">Second pass</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/</span><span class="se">(?&lt;</span><span class="sr">left&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)\s</span><span class="sr">+</span><span class="se">(?&lt;</span><span class="sr">right&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">/gm</span>

  <span class="k">return</span> <span class="p">[...</span><span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">regex</span><span class="p">)]</span>
    <span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">current</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="p">[</span><span class="nx">_</span><span class="p">,</span> <span class="nx">left</span><span class="p">]</span> <span class="o">=</span> <span class="nx">current</span>
      <span class="kd">const</span> <span class="nx">rightMatch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RegExp</span><span class="p">(</span><span class="dl">"</span><span class="se">\\</span><span class="s2">W(</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">left</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">)$</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">gm</span><span class="dl">"</span><span class="p">)</span>
      <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">rightMatch</span><span class="p">)].</span><span class="nx">length</span>

      <span class="k">return</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">left</span> <span class="o">*</span> <span class="nx">count</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Reducers to the rescue!</p>

<p>The code is much more compact, cool I guess, but there are some new problems.</p>

<p>The reducer is being used correctly, nothing wrong there</p>

<p>The first problem is constructing a new regex pattern in each loop containing the left column value to find in the right column. This has a small cost to it, but it’s notable.</p>

<p>We then apply that match against the whole input - while it’s a string, this is almost the same as looking through the right array with the filter each time, but we have a more complex operation, and do it on the entire dataset.</p>

<p>I had hopes this would be better, but is so much worse.</p>

<h5 id="third-pass">Third Pass</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/</span><span class="se">(?&lt;</span><span class="sr">left&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)\s</span><span class="sr">+</span><span class="se">(?&lt;</span><span class="sr">right&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">$/gm</span>

  <span class="kd">const</span> <span class="nx">Left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">const</span> <span class="nx">Right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">()</span>

  <span class="p">;[...</span><span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">regex</span><span class="p">)]</span>
    <span class="p">.</span><span class="nf">forEach</span><span class="p">(({</span>  <span class="na">groups</span><span class="p">:</span> <span class="p">{</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="p">}</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">Left</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>

      <span class="k">if </span><span class="p">(</span><span class="nx">Right</span><span class="p">.</span><span class="nf">has</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">Right</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">right</span><span class="p">,</span> <span class="nx">Right</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">Right</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">right</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>

  <span class="kd">let</span> <span class="nx">similarity</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">left</span> <span class="k">of</span> <span class="nx">Left</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">occurrances</span> <span class="o">=</span> <span class="nx">Right</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">occurrances</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">similarity</span> <span class="o">+=</span> <span class="nx">left</span> <span class="o">*</span> <span class="nx">occurrances</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">similarity</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Being let down with the reducer, and regex, I spent a moment to think what a faster operation would be.</p>

<p><em>Why not count occurrences as we’re iterating to produce the 2 arrays?</em></p>

<p>Using a map, with the number as the key and the occurrences as the value - each occurrence increments the value.</p>

<p>There’s no need to store all the right numbers anymore, duplicates are removed. Awesome.</p>

<p>Now the scoring is a quick lookup of the map for the left number.</p>

<p>Initial testing of this revealed that it was faster than the reducer on the test set, but still slower than the first pass with the array filter. <em>This is why real data is important to work with too</em> - This approach is much faster than the approach one and two with the actual data.</p>

<h5 id="fourth-pass">Fourth pass</h5>

<p>Maps are weird, what about an object that behaves the same?</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/</span><span class="se">(?&lt;</span><span class="sr">left&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)\s</span><span class="sr">+</span><span class="se">(?&lt;</span><span class="sr">right&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">$/gm</span>

  <span class="kd">const</span> <span class="nx">Left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">const</span> <span class="nx">Right</span> <span class="o">=</span> <span class="p">{}</span>

  <span class="p">;[...</span><span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">regex</span><span class="p">)]</span>
    <span class="p">.</span><span class="nf">forEach</span><span class="p">(({</span>  <span class="na">groups</span><span class="p">:</span> <span class="p">{</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="p">}</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">Left</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>

      <span class="nx">Right</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">Right</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">||</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">})</span>

  <span class="kd">let</span> <span class="nx">similarity</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">left</span> <span class="k">of</span> <span class="nx">Left</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">similarity</span> <span class="o">+=</span> <span class="nx">left</span> <span class="o">*</span> <span class="p">(</span><span class="nx">Right</span><span class="p">[</span><span class="nx">left</span><span class="p">]</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">similarity</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The code is about the same, though I don’t think the <code class="language-plaintext highlighter-rouge">||</code> (OR) operators are doing favours for readability.</p>

<p>The object is a little easier to reason about if you’ve don’t know how a map works.</p>

<p>But this also performs worse compared to the third pass. But only slightly slower.</p>

<h5 id="fifth-pass-for-funzies">Fifth pass (for funzies)</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solve</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/</span><span class="se">(?&lt;</span><span class="sr">left&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)\s</span><span class="sr">+</span><span class="se">(?&lt;</span><span class="sr">right&gt;</span><span class="se">\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">$/gm</span>

  <span class="kd">const</span> <span class="nx">Left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">const</span> <span class="nx">Right</span> <span class="o">=</span> <span class="p">{}</span>

  <span class="p">;[...</span><span class="nx">input</span><span class="p">.</span><span class="nf">matchAll</span><span class="p">(</span><span class="nx">regex</span><span class="p">)]</span>
    <span class="p">.</span><span class="nf">forEach</span><span class="p">(({</span>  <span class="na">groups</span><span class="p">:</span> <span class="p">{</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="p">}</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">Left</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>

      <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">Right</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="o">??</span> <span class="mi">0</span>
      <span class="nx">Right</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="p">})</span>

  <span class="kd">let</span> <span class="nx">similarity</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">left</span> <span class="k">of</span> <span class="nx">Left</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">occurrances</span> <span class="o">=</span> <span class="nx">Right</span><span class="p">[</span><span class="nx">left</span><span class="p">]</span> <span class="o">??</span> <span class="mi">0</span>
    <span class="nx">similarity</span> <span class="o">+=</span> <span class="nx">left</span> <span class="o">*</span> <span class="nx">occurrances</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">similarity</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Instead of the <code class="language-plaintext highlighter-rouge">||</code> (OR) operators, what about nullish coallescence (??)</p>

<p>This turns out to be more faster than the OR operator, and more stable in timing, but still slower than map.</p>

<p>I should probably call it there.</p>

<hr />

<h3 id="summary--timings">Summary &amp; Timings</h3>

<p>I think thats enough approaches to solve the problem.</p>

<p>Starting with rough solutions and then refining was a good exercise in going through the motions of make it work first make it better later.</p>

<p>I’m very happy with the operation times, I’m sure there is some amazing algorithm that can do this much faster.</p>

<table>
  <thead>
    <tr>
      <th>passes (pt1)</th>
      <th>time (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1: sample dataset</td>
      <td>0.526166</td>
    </tr>
    <tr>
      <td><strong>2: sample dataset</strong></td>
      <td><strong>0.192042</strong></td>
    </tr>
    <tr>
      <td>1: actual dataset</td>
      <td>1.409791</td>
    </tr>
    <tr>
      <td><strong>2: actual dataset</strong></td>
      <td><strong>1.182459</strong></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>passes (pt2)</th>
      <th>time (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1: sample dataset</td>
      <td>0.136167</td>
    </tr>
    <tr>
      <td>2: sample dataset</td>
      <td>0.328542</td>
    </tr>
    <tr>
      <td>3: sample dataset</td>
      <td>0.168917</td>
    </tr>
    <tr>
      <td>4: sample dataset</td>
      <td>0.28325</td>
    </tr>
    <tr>
      <td><strong>5: sample dataset</strong></td>
      <td><strong>0.123125</strong></td>
    </tr>
    <tr>
      <td>1: actual dataset</td>
      <td>11.550959</td>
    </tr>
    <tr>
      <td>2: actual dataset</td>
      <td>28.845666</td>
    </tr>
    <tr>
      <td><strong>3: actual dataset</strong></td>
      <td><strong>0.640042</strong></td>
    </tr>
    <tr>
      <td>4: actual dataset</td>
      <td>0.847375</td>
    </tr>
    <tr>
      <td>5: actual dataset</td>
      <td>0.802458</td>
    </tr>
  </tbody>
</table>

<p>This is also a good reminder to that when testing performance of functions, remember to test against a variety of data. If I had only tested with the sample dataset, I’d lave landed on using an Object instead of a Map for keeping track of numbers and values. Missing out on a 5x improvement on larger data.</p>

<p>Sub-millisecond solution for part 2 makes me incredibly proud.</p>

<h4 id="additional-findings">Additional Findings</h4>

<p>Something really fun to keep in mind when working with NodeJS - the JIT compiler in V8 can do some wonderful things for performance. If you “warm up” the function with a run or two, the operation becomes even faster.</p>

<table>
  <thead>
    <tr>
      <th>Runs</th>
      <th>time (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Run 1: sample dataset</td>
      <td>0.10170799999999858</td>
    </tr>
    <tr>
      <td>Run 2: sample dataset</td>
      <td>0.01087500000000218</td>
    </tr>
    <tr>
      <td>Run 1: actual dataset</td>
      <td>0.6606670000000037</td>
    </tr>
    <tr>
      <td>Run 2: actual dataset</td>
      <td>0.36933299999999747</td>
    </tr>
  </tbody>
</table>

<p>The sample dataset reveals a 10x improvement. The dream is crushed with the actual dataset, with only a 2x improvement.</p>

<hr />

<p>Overall, first day was fun! I learned some things about the approaches, and in writing this blog post out, I learned some things about myself.</p>]]></content><author><name></name></author><category term="post" /><category term="aoc" /><category term="nodejs" /></entry><entry><title type="html">2024 Refresh</title><link href="https://gregdaynes.com/post/2024/10/26/2024-refresh.html" rel="alternate" type="text/html" title="2024 Refresh" /><published>2024-10-26T20:26:00+00:00</published><updated>2024-10-26T20:26:00+00:00</updated><id>https://gregdaynes.com/post/2024/10/26/2024-refresh</id><content type="html" xml:base="https://gregdaynes.com/post/2024/10/26/2024-refresh.html"><![CDATA[<p>It’s October, I’m on vacation after a very long, arduous stint building a new Theme for Shopify. Staying in a small single room cabin on the edge of the Pacific Ocean with a limited internet connection, what better place to catch up on sleep, reading, and putting some of those readings to practice.</p>

<p><em>For context, building a theme for Shopify Theme Store is a large task, there are infinite variables to consider, and choices to be made. There is no knowing what a merchant will actually want or try to do, so the code needs to be stable, resilient and incredibly flexible. This has given my skills in HTML (Liquid), CSS and Javascript a real world push, mastering the new (baseline availability) techniques available.</em></p>

<p>At the outset of this refresh, the goal was to apply more modern CSS approaches to last year’s design, removing anything that isn’t necessary, and cleaning up the design. It should still be the same old design, where decorative elements are replaced with space, JS replaced with CSS, and HTML rigorously refined to be the bare minimum required to represent each page.</p>

<h2 id="collecting-resource">Collecting Resource</h2>

<p>I started thinking about an update back in July. Roman Komarov wrote a post on how to achieve text that scales to the container width<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup>. The header of <a href="https://gregdaynes.com">gregdaynes.com</a> site uses Fitty<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">2</a></sup> in the header for the title and subtitle. Fitty works, but requires Javascript, and has a flicker on load when rendering. So this technique kicked off the whole thing, but I wouldn’t get around to trying it out until yesterday.</p>

<p>Throughout the year, reading posts, books, toots, newsletters, anything around current frontend trends. There are were definitely a few stand out pieces and tools.</p>

<h2 id="layout">Layout</h2>

<p>I finally got around to reading through Every Layout<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup> from Andy Bell<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">4</a></sup> and Heydon Pickering<sup id="fnref:11" role="doc-noteref"><a href="#fn:11" class="footnote" rel="footnote">5</a></sup>. It’s definitely worth the money, and time to catch up on modern approaches to layouts. The book-site has generators, and the applied / practical approaches laid out are fantastic.</p>

<p>This refresh utilized the Sidebar layout this year, and abandoned the Stack approach from last year (also from Every Layout).</p>

<p>Similarly continuing use of Utopia<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">6</a></sup> generators to produce spacing, and typography, though I found I didn’t need much of the spacing custom properties.</p>

<h2 id="markup">Markup</h2>

<p>In my spare time, I’ve been working on a SaaS idea (that I won’t go into details about now). I set out a goal there to move fast (it’s been anything but), however the UI is where I’ve been the most productive. It started out with Tailwind (Yes, I know. It was for the component library). Then onto Bootstrap (because it’s familiar, less annoying than Tailwind, and had all the components I really needed). Both being chonky and unfriendly to write, I did some bespoke CSS, but realized it was slowing me down. I landed on Pico.css<sup id="fnref:12" role="doc-noteref"><a href="#fn:12" class="footnote" rel="footnote">7</a></sup>, I have to admit it’s fantastic. The classless approach to using semantic markup to produce a MVP UI is definitely worth it.</p>

<p>Huh? What does some SaaS and CSS frameworks have to do with the refresh?</p>

<p>Pico.css got me into the groove of writing less selectors, less divs, less everything.</p>

<p>Coincidentally, I also sat down to read all of Jens Oliver Meiert<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">8</a></sup> Upgrade your HTML series<sup id="fnref:13" role="doc-noteref"><a href="#fn:13" class="footnote" rel="footnote">9</a></sup>. They’re quick little looks at writing HTML and how to rethink old practices which you may still be stuck on. These tips all reinforced the idea of removing as much as possible from the markup, until it is lean.</p>

<p><strong>Which was the first optimization for the refresh - Remove everything that doesn’t matter.</strong></p>

<p>This means I got rid of all the selectors I didn’t need (most of them, I think there are 3 or 4 left, that could also be removed now that I think about it).</p>

<p>Then I got rid of all the decoration elements, all the <code class="language-plaintext highlighter-rouge">&lt;hr&gt;</code> I use for headings and delimiters.</p>

<p>Speaking of decoration, I hate favicons. At least there’s no need for my website. If it was a PWA or a branded entity, yes, use them. Otherwise, no, it’s a request you don’t need, it is not always visible, so why? I stubbed the favicon out with</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;link rel="icon" href="data:;base64,iVBORw0KGgo="&gt;
</code></pre></div></div>

<p>Jekyll SEO was a good idea, at one point in time. But we’re in the age of bad AI and LLM everything. Google and Bing do everything they can to <em>not</em> crawl websites anymore. I was mostly using it for Open Graph and metadata generation. Jens once again to the rescue with a look at Minimal Social Markup<sup id="fnref:15" role="doc-noteref"><a href="#fn:15" class="footnote" rel="footnote">10</a></sup>. Going from 15-20 metatags to 5 is great. But I also lost <code class="language-plaintext highlighter-rouge">&lt;title&gt;</code> and <code class="language-plaintext highlighter-rouge">description</code>, so those were added manually.</p>

<p>After that, I looked at all the elements in use, and systematically removed or replaced the ones that didn’t matter anymore.</p>

<p>On the home page, this brought DOM count from 151 to 113. Heck yes!</p>

<h2 id="styling">Styling</h2>

<p>Next up, I took a very-dull metaphoric axe to the CSS.</p>

<p>Without class selectors in the markup, those could all be removed.</p>

<p>CSS reset? Gone. No need for many of the rules in most/all resets. Even Andy Bell’s Modern Reset<sup id="fnref:14" role="doc-noteref"><a href="#fn:14" class="footnote" rel="footnote">11</a></sup> (which is great, and you should review it).</p>

<p>I did keep the colours from the previous design. Though it could still use work to reduce the contrast.</p>

<p><code class="language-plaintext highlighter-rouge">text-wrap: balance</code> made an appearance now, simplifying places I’d use flexbox to wrap reasonably. No need to manage the box model now!</p>

<p>Font stacks were removed, not replaced. <code class="language-plaintext highlighter-rouge">sans-serif</code> and <code class="language-plaintext highlighter-rouge">impact</code> are viable enough for everywhere.</p>

<p>Table of Contents with its fancy dotted lines between the link and the created/published date, replaced with an approach using less markup, even if less reliable for all layouts. I felt this was a tradeoff worth making.</p>

<p>Every Layout<sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup> - Sidebar layout gave a minimal, but capable 2 column layout (or main with sidebar). Like the previous design, but less overhead of markup and styling to achieve the same effect.</p>

<p>After all the work refactoring the CSS, the home page went from 18.09 kB to 8.94 kB. I’ll say 50%.</p>

<h2 id="more-on-page-size">More on page size</h2>

<p>50% request transfer reduction is great. Getting to less than 14 kB<sup id="fnref:16" role="doc-noteref"><a href="#fn:16" class="footnote" rel="footnote">12</a></sup> is important and a great achievement. Now we have single HTTP Request with a single packet response. Think of all the routing infrastructure between your device, and this site’s host. Now it’s only got 1 packet to loose (bad) but only 1 packet to retry (good).</p>

<p>But what about Gzip / Brotli?</p>

<p>The previous design, of course fell into the 1 packet threshold before, at ~9 kB compressed. But the new design is starting at under 9 kB? it’s now 3 kB (2.3 kB with Brotli). We’re under 1/4 of the available space in the packet, meaning we have a lot of room for content. My article on <a href="https://gregdaynes.com/post/2018/09/08/getting-started-with-minitest.html">Minitest</a> which is the largest on the site comes in at 11.5 kB transferred. Still within the 1 packet. My <a href="https://gregdaynes.com/resume">Resume</a> complete with the silly SVG icons that <em>should</em> be removed, comes in at 6.62 kB. I might even be able to squeeze a headshot into the leftover space.</p>

<h2 id="what-else">What else?</h2>

<p>That’s pretty much it.</p>

<p>I made some miscellaneous changes to data structures for other refactoring, reuse of liquid snippets. Bumped Jekyll, and fixed a bug in my gems used to build and optimize CSS and HTML.</p>

<p>One thing I haven’t done yet, other than this post, is revisit the content. It’s time for a new Bio and introductory text, and some new posts about things that have been in my mind. But for now, vacation should be the only thing on my mind (this is not reasonable).</p>

<p>Reach out to me on <a href="https://mastodon.social/@gregdaynes">Mastodon</a>, or <a href="email@gregdaynes.com">email</a> with questions feedback or comments. I want to hear what you think. Is this optimization too much?</p>

<h2 id="references">References</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:4" role="doc-endnote">
      <p><a href="https://kizu.dev/fit-to-width">Kizu.dev/fit-to-width</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p><a href="https://github.com/rikschennink/fitty">Fitty</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://every-layout.dev">Every Layout</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p><a href="https://piccalil.li">Andy Bell</a> <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:11" role="doc-endnote">
      <p><a href="https://heydonworks.com">Heydon Pickering</a> <a href="#fnref:11" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://buildexcellentwebsit.es">Build Excellent Websites</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:12" role="doc-endnote">
      <p><a href="https://picocss.com">Pico.css</a> <a href="#fnref:12" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p><a href="https://meiert.com">Jens Oliver Meiert</a> <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:13" role="doc-endnote">
      <p><a href="https://leanpub.com/u/j9t">Upgrade your HTML</a> <a href="#fnref:13" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:15" role="doc-endnote">
      <p><a href="https://meiert.com/en/blog/minimal-social-markup">Minimal Social Markup</a> <a href="#fnref:15" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:14" role="doc-endnote">
      <p><a href="https://piccalil.li/blog/a-more-modern-css-reset">A More Modern CSS Reset</a> <a href="#fnref:14" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:16" role="doc-endnote">
      <p><a href="https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/">Why your website should be under 14kB in size</a> <a href="#fnref:16" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[It’s October, I’m on vacation after a very long, arduous stint building a new Theme for Shopify. Staying in a small single room cabin on the edge of the Pacific Ocean with a limited internet connection, what better place to catch up on sleep, reading, and putting some of those readings to practice.]]></summary></entry><entry><title type="html">Callable Class Instance</title><link href="https://gregdaynes.com/note/2024/07/30/callable-class-instance.html" rel="alternate" type="text/html" title="Callable Class Instance" /><published>2024-07-30T01:55:00+00:00</published><updated>2024-07-30T01:55:00+00:00</updated><id>https://gregdaynes.com/note/2024/07/30/callable-class-instance</id><content type="html" xml:base="https://gregdaynes.com/note/2024/07/30/callable-class-instance.html"><![CDATA[<p>I encountered a situation in Javascript, where I needed a Class instance that could be called like a function.</p>

<p>StackOverflow to the rescue<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">test</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">node:test</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">assert</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">node:assert/strict</span><span class="dl">'</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Callable ClassInstance</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">class</span> <span class="nc">Callable</span> <span class="kd">extends</span> <span class="nc">Function</span> <span class="p">{</span>
    <span class="nf">constructor </span><span class="p">()</span> <span class="p">{</span>
      <span class="k">super</span><span class="p">(</span><span class="dl">'</span><span class="s1">...args</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return this.fn(...args)</span><span class="dl">'</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">fn </span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">called</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">callableInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Callable</span><span class="p">()</span>
  <span class="nf">callableInstance</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Another approach, much simpler is to define a function, then attach properties to it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Callable Object Instance</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nf">Callable</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">called</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nx">fn</span><span class="p">.</span><span class="nx">someProperty</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">prop</span><span class="dl">'</span>

    <span class="k">return</span> <span class="nx">fn</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">callableInstance</span> <span class="o">=</span> <span class="nc">Callable</span><span class="p">()</span> 
  <span class="nf">callableInstance</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>This approach breaks sharing Prototype Shapes, so too many of these will be problematic for memory<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>.</p>

<h2 id="references">References</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://stackoverflow.com/questions/49279702/calling-class-instance-as-a-function-in-javascript">Calling class instance as a function in JavaScript</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">MDN</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://mathiasbynens.be/notes/shapes-ics#shapes">JavaScript engine fundamentals: Shapes and Inline Caches</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Class instance that can be called as a function?!]]></summary></entry><entry><title type="html">Web Components</title><link href="https://gregdaynes.com/note/2024/07/29/web-components.html" rel="alternate" type="text/html" title="Web Components" /><published>2024-07-29T17:55:00+00:00</published><updated>2024-07-29T17:55:00+00:00</updated><id>https://gregdaynes.com/note/2024/07/29/web-components</id><content type="html" xml:base="https://gregdaynes.com/note/2024/07/29/web-components.html"><![CDATA[<h2 id="handleevent">handleEvent()</h2>

<p>Event handlers in javascript can take a handler function callback, or an object.
If the object has a <code class="language-plaintext highlighter-rouge">handleEvent()</code> method, that will be called when any event fires.
Debinding events works the same, pass <code class="language-plaintext highlighter-rouge">this</code> to <code class="language-plaintext highlighter-rouge">.removeEventListener('some-event', this)</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function someContext () {
  return {
    handleEvent() {
      // this will respond do any event triggered on the element
    }
  }
}

el.addEventListener('some-event', this)
</code></pre></div></div>

<p>This can lead to much simpler component markup, especially when debinding events<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<h2 id="references">References</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://gomakethings.com/the-handleevent-method-is-the-absolute-best-way-to-handle-events-in-web-components">The handleEvent() method is the absolute best way to handle events in Web Components</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Collecting snippets and tips for Web Components]]></summary></entry><entry><title type="html">Hexdump shell command</title><link href="https://gregdaynes.com/note/2024/02/10/hexdump-shell-command.html" rel="alternate" type="text/html" title="Hexdump shell command" /><published>2024-02-10T03:52:00+00:00</published><updated>2024-02-10T03:52:00+00:00</updated><id>https://gregdaynes.com/note/2024/02/10/hexdump-shell-command</id><content type="html" xml:base="https://gregdaynes.com/note/2024/02/10/hexdump-shell-command.html"><![CDATA[<p>I was asked to help understand the following command</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxd <span class="nt">-p</span> data.txt | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> | <span class="nb">sed</span> <span class="s1">'s/.{2}/0x&amp;,/g'</span> <span class="o">&gt;</span> obfuscated.txt
</code></pre></div></div>

<p>This is my breakdown</p>

<p><code class="language-plaintext highlighter-rouge">xxd -p data.txt</code> dumps the hex value of the data.
<code class="language-plaintext highlighter-rouge">tr -d '\n'</code> is deleting <code class="language-plaintext highlighter-rouge">\n</code> on each input, it’s removing newlines.
<code class="language-plaintext highlighter-rouge">sed -E 's/.{2}/0x&amp;,/g'</code> takes the single line input and checks it against the regex.</p>

<p><code class="language-plaintext highlighter-rouge">s/.{2}/0x&amp;,/g</code> breaks down to
<code class="language-plaintext highlighter-rouge">.{2}</code> which says match 2 of any non line-terminating character such as <code class="language-plaintext highlighter-rouge">\n</code>
<code class="language-plaintext highlighter-rouge">0x&amp;,</code> is then used to surround the 2 characters matched. <code class="language-plaintext highlighter-rouge">0x</code> is the prefix, <code class="language-plaintext highlighter-rouge">&amp;</code> is the stand in for the matched characters, and <code class="language-plaintext highlighter-rouge">,</code> is the suffix
<code class="language-plaintext highlighter-rouge">g</code> is the flag to run against all, not just the first match.</p>

<p>So this script is converting a multiline hexdump, into a single line, then prefixing each character pair with the the numerical constant in hex.</p>

<p><code class="language-plaintext highlighter-rouge">echo '1' | xxd -p</code> outputs <code class="language-plaintext highlighter-rouge">310a</code>.
<code class="language-plaintext highlighter-rouge">1</code> is <code class="language-plaintext highlighter-rouge">31</code> in hex <code class="language-plaintext highlighter-rouge">0a</code> is end of line.
<code class="language-plaintext highlighter-rouge">echo '1' | xxd -p | tr -d '\n'</code> outputs <code class="language-plaintext highlighter-rouge">310a%</code>  removing the line breaks from the hex dump.
<code class="language-plaintext highlighter-rouge">echo '1' | xxd -p | tr -d '\n' | sed -E 's/.{2}/0x&amp;,/g'</code> outputs <code class="language-plaintext highlighter-rouge">0x31,0x0a,</code></p>

<p>I found this task deeply enjoyable, hopefully my understanding is correct.</p>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[I was asked to help understand the following command]]></summary></entry><entry><title type="html">2024 Return of the personal life</title><link href="https://gregdaynes.com/post/2024/01/02/return-of-the-personal-site.html" rel="alternate" type="text/html" title="2024 Return of the personal life" /><published>2024-01-02T07:03:00+00:00</published><updated>2024-01-02T07:03:00+00:00</updated><id>https://gregdaynes.com/post/2024/01/02/return-of-the-personal-site</id><content type="html" xml:base="https://gregdaynes.com/post/2024/01/02/return-of-the-personal-site.html"><![CDATA[<p>Happy New Year - Welcome to 2024!</p>

<p>2023 brought a lot of changes in technology, with the availability of LLM and Generative AIs for public consumption, to the <a href="https://pluralistic.net/2023/01/21/potemkin-ai/">enshittification</a> of everything.</p>

<p>I spent much of the year as a consultant, mostly in Shopify e-commerce, location based entertainment, interactive education, and physical literacy. After leaving my research &amp; development role within the Canadian defence industry.</p>

<p>In my work and areas of research, several technical themes kept reappearing throughout 2023 - outside of AI of course:</p>

<ol>
  <li>Software Maintainability</li>
  <li>Sustainable Development</li>
  <li>Fediverse and Platform Exodus</li>
  <li>Reduced role of Active-Computing</li>
</ol>

<p>While 1, 2 are self explanatory and something that will forever be a topic of discussion and professional pursuit, 3 &amp; 4 are not new, but have a renewed focus.</p>

<h3 id="fediverse-and-the-exodus---bring-on-the-indieweb">Fediverse and the Exodus - Bring on the <a href="https://indieweb.org">Indieweb</a></h3>

<p>I’m not sure I like the term indieweb, but it works for now. I’ve missed the internet of the 90s/00s, but it didn’t disappear, our attention was misplaced elsewhere. Events in 2022 and 2023 have brought the independent web back into view as some people are rebelling against centralized platforms.</p>

<p>Those platforms aren’t going to disappear anytime soon, but we can make concerted efforts to prioritize and utilize the free and open web to control our own content and publish as we see fit. The <a href="https://www.theverge.com/2023/10/23/23928550/posse-posting-activitypub-standard-twitter-tumblr-mastodon">POSSE</a> protocol is a good guidance for moving on in 2024.</p>

<h3 id="reduced-role-of-active-computing">Reduced role of Active Computing</h3>

<p>A subject I’ve been ruminating over this past year, is the role Active computing takes in our lives. Between deep work, or mindless doomscrolling, we’re actively engaging with computers to do things. This requires our time and attention to perform actions however menial. Computers are surprisingly good at doing things repeatedly and scheduled. So why do we need to actively engage to get what we want? Why isn’t it available for us when we think about it or pass by?</p>

<p>Phone lock screens are one way to achieve this. It’s personal, and with you most of the time, but that comes with the mental burden of having the device with you and looking at it. Physical information dashboards like <a href="">magic mirrors</a> and <a href="">e-ink calendars</a> are potentially more appropriate for passive information.</p>

<p>Communication channels: Slack, Discord, Texting/SMS are all asynchronous communication but have certain expectations to be synchronous. This puts a burden on us to have our phones or laptops at the ready, to be willing to jump to answer any question asked. Bring back email, things can wait for a few hours, or days. Nothing needs immediate resolution, and if it does, pick up the phone and call.</p>

<p><em>Email, I never thought I’d say I wanted more email, but here we are.</em></p>

<p>During Summer 2023, I was writing small applications that would fetch data from various services. My goal for each of these applications was to be fast, simple, and out of the way. They’re CLIs, which requires inputting the command into a terminal, and viewing the results. Fast + Simple were covered, single responsibility and ASCII output means there’s not a lot of room for feature creep and bloat.</p>

<p>But they were very much in-the-way, and required active computing.</p>

<p>Enter <code class="language-plaintext highlighter-rouge">cron</code>, My favourite scheduling tool from 1975. Unchanged, and unequalled for 48 years.</p>

<p><em>Did you know cron jobs will email the output of the job upon completion? Usually it’s to the local inbox on your computer, but you can configure sending to an external email address.</em></p>

<p>Pairing cron + my little CLIs, I now get emails of daily events, weather, air quality, alerts, and news without having to open separate apps, or refresh screens. I can now consume the data on my own time and schedule, that’s independent of the application.</p>

<p>This has reduced my phone use, and increased my focus on work, and life away from technology however it is still active-computing.</p>

<p>Something I haven’t explored enough yet, alert-only systems. Maybe these apps could have thresholds for when something is sent to the consumer? We use this for application monitoring when your network is saturated or response time exceeds 500ms, financial trading does this, so why not daily life things?</p>

<p>Schedule for the day starts earlier than usual, notification when you are getting ready for the day. Air Quality is abnormal - notification to don a mask. UV index is high and you are outside for more than a few minutes, notification put on sunscreen or seek cover. Breaking news events, aggregate and send as an email near the end of the day.</p>

<p>The last one is not actionable, it does not impact you, you can’t do anything to affect it, so move it to something you can look at when you feel like it. This is where LLMs can come in somewhat handy, rough 1-2 sentence summary of daily events, in an aggregate email. now you don’t need to check your RSS reader periodically.</p>

<p>I have more thoughts on this which I will write about as I can. If you have suggestions for apps that could be a good fit, please let me know! I’d love more of this in my life.</p>

<h3 id="where-im-going">Where I’m going</h3>

<p>Instead of resolutions for 2024, I have my goals.</p>

<p>They are to:</p>

<ul>
  <li>Own my personal platforms (this website)</li>
  <li>Automate any software task that should not need my attention or instruction to complete.</li>
  <li>Read and write more emails.</li>
  <li>Put the phone down and spend time with purpose.</li>
  <li>Reduce computer usage in favour of work and play.</li>
  <li>Make an effort to use boring and low-tech computing.</li>
</ul>

<p>What are your goals for 2024?</p>

<p><em>I started out by writing a rant around Business growth, economic layoffs, Generative AIs/LLMS, burnout and lack of caring that’s causing maintainbility and sustainable softare development to fall to the wayside, but it was really just me yelling at the clouds. I’m trying to be more proactive.</em></p>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[Happy New Year - Welcome to 2024!]]></summary></entry><entry><title type="html">Fellow Stagg Repair</title><link href="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html" rel="alternate" type="text/html" title="Fellow Stagg Repair" /><published>2023-12-28T00:00:00+00:00</published><updated>2023-12-28T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html"><![CDATA[<h3 id="problem">Problem</h3>

<p>The control knob on the base was not registering presses (which turn the kettle on and off). The kettle itself was working fine, and the temperature control was working.</p>

<h3 id="solution">Solution</h3>

<p>The base is held together with 4 screws, and 8 clips. The clips are easy to release with a flathead screwdriver. The screws are hidden under the sticker on the bottom - <em>Not the rubber pads</em>.</p>

<p><em>In my looking for the screws, I removed the feet, which caused the rubber to tear. They’re easy enough to glue back on.</em></p>

<p>The rotary encoder is situated on a daughter board fixed with 2 phillips screws and connected with a ribbon cable to the main board. The cable disconnects from a JST port on the mainboard, but is soldered on the daughter board.</p>

<p>Rotary Encoder Details:</p>

<ul>
  <li>5V</li>
  <li>20 pulses</li>
  <li>13mm x 14mm</li>
</ul>

<p>I used <a href="https://www.amazon.ca/dp/B07T3672VK">these encoders</a> from Amazon.</p>

<p>Desoldering the rotary encoder was straight forward, I used a solder-sucker and wick to remove and prepare the pads. I did have to have fairly high temperature on my iron around 740 to get the factory solder to warm up.</p>

<p>Re-assembly is disassembly in reverse, be mindful of the thin wires routing around the centre. Use a bit of Kapton tape to keep things in place.</p>

<h3 id="outcome">Outcome</h3>

<p>I can use my kettle again. I broke the display, but it works enough to not warrant a replacement base $100 USD from their parts shop, which when factored in CAD and shipping, is more than new kettle from a Canadian distributer.</p>

<p>I like my Fellow Stagg EKG Kettle, but I don’t think I will buy another Fellow product with electronics (I love the Prismo - Aeropress accessory).</p>

<h3 id="notes">Notes</h3>

<p>The screws use a triangle security bit, which I didn’t have on hand, however a T-6 Torx bit worked well.</p>

<p>The LCD is fixed (more than solder joints) to the main control board, which turns out is very fragile. I managed to crack the LCD even while attempting to be gentle, I didn’t touch the board except disconnect and reconnect of the rotary daughter board connector. Beware.</p>

<p>I did not measure the stem prior to this repair, the donor rotary encoder stem was much longer. Beware of this and make sure to measure and find the appropriate stem. A long one of course workse, but the knob stands above the case now, and is easier for water to find ingress into the electronics.</p>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[Outlining repair of the base for the Stag EKG Kettle by Fellow.]]></summary></entry></feed>