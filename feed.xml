<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://gregdaynes.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gregdaynes.com/" rel="alternate" type="text/html" /><updated>2024-10-30T14:51:02+00:00</updated><id>https://gregdaynes.com/feed.xml</id><entry><title type="html">2024 Refresh</title><link href="https://gregdaynes.com/post/2024/10/26/2024-refresh.html" rel="alternate" type="text/html" title="2024 Refresh" /><published>2024-10-26T20:26:00+00:00</published><updated>2024-10-26T20:26:00+00:00</updated><id>https://gregdaynes.com/post/2024/10/26/2024-refresh</id><content type="html" xml:base="https://gregdaynes.com/post/2024/10/26/2024-refresh.html"><![CDATA[<p>It’s October, I’m on vacation after a very long, arduous stint building a new Theme for Shopify. Staying in a small single room cabin on the edge of the Pacific Ocean with a limited internet connection, what better place to catch up on sleep, reading, and putting some of those readings to practice.</p>

<p><em>For context, building a theme for Shopify Theme Store is a large task, there are infinite variables to consider, and choices to be made. There is no knowing what a merchant will actually want or try to do, so the code needs to be stable, resiliant and incredibly flexible. This has given my skills in HTML (Liquid), CSS and Javascript a real world push, mastering the new (baseline availability) techniques available.</em></p>

<p>At the outset of this refresh, the goal was to apply more modern CSS approaches to last years design, removing anything that isn’t necessary, and cleaning up the design. It should still be the same old design, where decorative elements are replaced with space, JS replaced with CSS, and HTML rigerously refined to be the bare minimum required to represent each page.</p>

<h2 id="collecting-resource">Collecting Resource</h2>

<p>I started thinking about an update back in July. Roman Komarov wrote a post on how to achieve text that scales to the container width<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup>. The header of <a href="https://gregdaynes.com">gregdaynes.com</a> site uses Fitty<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">2</a></sup> in the header for the title and subtitle. Fitty works, but requires Javascript, and has a flicker on load when rendering. So this technique kicked off the whole thing, but I wouldn’t get around to trying it out until yesterday.</p>

<p>Throughout the year, reading posts, books, toots, newsletters, anything around current frontend trends. There are were definitely a few stand out pieces and tools.</p>

<h2 id="layout">Layout</h2>

<p>I finally got around to reading through Every Layout<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup> from Andy Bell<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">4</a></sup> and Heydon Pickering<sup id="fnref:11" role="doc-noteref"><a href="#fn:11" class="footnote" rel="footnote">5</a></sup>. It’s definitely worth the money, and time to catch up on modern approaches to layouts. The book-site has generators, and the applied / practical approaches laid out are fantastic.</p>

<p>This refresh utilized the Sidebar layout this year, and abandoned the Stack approach from last year (also from Every Layout).</p>

<p>Similarily continuing use of Utopia<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">6</a></sup> generators to produce spacing, and typography, though I found I didn’t need much of the spacing custom properties.</p>

<h2 id="markup">Markup</h2>

<p>In my spare time, I’ve been working on a SaaS idea (that I won’t go into details about now). I set out a goal there to move fast (it’s been anything but), however the UI is where I’ve been the most productive. It started out with Tailwind (Yes, I know. It was for the component library). Then onto Bootstrap (because it’s familiar, less annoying that Tailwind, and had all the components I really needed). Both being chonky and unfriendly to write, I did some bespoke CSS, but realized it was slowing me down. I landed on Pico.css<sup id="fnref:12" role="doc-noteref"><a href="#fn:12" class="footnote" rel="footnote">7</a></sup>, I have to admit it’s fantastic. The classless approach to using semantic markup to produce a MVP UI is definitely worth it.</p>

<p>Huh? What does some SaaS and CSS frameworks have to do with the refresh?</p>

<p>Pico.css got me into the groove of writing less selectors, less divs, less everything.</p>

<p>Coincidentally, I also sat down to read all of Jens Oliver Meiert<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">8</a></sup> Upgrade your HTML series<sup id="fnref:13" role="doc-noteref"><a href="#fn:13" class="footnote" rel="footnote">9</a></sup>. They’re quick little looks at writing HTML and how to rethink old practices which you may still be stuck on. These tips all reinforced the idea of removing as much as possible from the markup, until it is lean.</p>

<p><strong>Which was the first optimization for the refresh - Remove everything that doesn’t matter.</strong></p>

<p>This means I got rid of all the selectors I didn’t need (most of them, I think there are 3 or 4 left, that could also be removed now that I think about it).</p>

<p>Then I got rid of all the decoration elements, all the <code class="language-plaintext highlighter-rouge">&lt;hr&gt;</code> I use for headings and delimiters.</p>

<p>Speaking of decoration, I hate favicons. At least there’s no need for my website. If it was a PWA or a branded entity, yes, use them. Otherwise, no, it’s a request you don’t need, it is not always visible, so why? I stubbed the favicon out with</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;link rel="icon" href="data:;base64,iVBORw0KGgo="&gt;
</code></pre></div></div>

<p>Jekyll SEO was a good idea, at one point in time. But we’re in the age of bad AI and LLM everything. Google and Bing do everything they can to <em>not</em> crawl websites anymore. I was mostly using it for Open Graph and metadata generation. Jens once again to the rescue with a look at Minimal Social Markup<sup id="fnref:15" role="doc-noteref"><a href="#fn:15" class="footnote" rel="footnote">10</a></sup>. Going from 15-20 metatags to 5 is great. But I also lost <code class="language-plaintext highlighter-rouge">&lt;title&gt;</code> and <code class="language-plaintext highlighter-rouge">description</code>, so those were added manually.</p>

<p>After that, I looked at all the elements in use, and systematically removed or replaced the ones that didn’t matter anymore.</p>

<p>On the home page, this brought DOM count from 151 to 113. Heck yes!</p>

<h2 id="styling">Styling</h2>

<p>Next up, I took a very-dull metaphoric axe to the CSS.</p>

<p>Without class selectors in the markup, those could all be removed.</p>

<p>CSS reset? Gone. No need for many of the rules in most/all resets. Even Andy Bell’s Modern Reset<sup id="fnref:14" role="doc-noteref"><a href="#fn:14" class="footnote" rel="footnote">11</a></sup> (which is great, and you should review it).</p>

<p>I did keep the colors from the previous design. Though it could still use work to reduce the contrast.</p>

<p><code class="language-plaintext highlighter-rouge">text-wrap: balance</code> made an appearance now, simplifying places I’d use flexbox to wrap reasonably. No need to manage the box model now!</p>

<p>Font stacks were removed, not replaced. <code class="language-plaintext highlighter-rouge">sans-serif</code> and <code class="language-plaintext highlighter-rouge">impact</code> are viable enough for everywhere.</p>

<p>Table of Contents with it’s fancy dotted lines between the link and the created/published date, replaced with an approach using less markup, even if less reliable for all layouts. I felt this was a tradeoff worth making.</p>

<p>Every Layout<sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup> - Sidebar layout gave a minimal, but capable 2 column layout (or main with sidebar). Like the previous design, but less overhead of markup and styling to achieve the same effect.</p>

<p>After all the work refactoring the CSS, the home page went from 18.09 kB to 8.94 kB. I’ll say 50%.</p>

<h2 id="more-on-page-size">More on page size</h2>

<p>50% request transfer reduction is great. Getting to less than 14 kB<sup id="fnref:16" role="doc-noteref"><a href="#fn:16" class="footnote" rel="footnote">12</a></sup> is important and a great achievement. Now we have single HTTP Request with a single packet response. Think of all the routing infrastructure between your device, and this site’s host. Now it’s only got 1 packet to loose (bad) but only 1 packet to retry (good).</p>

<p>But what about Gzip / Brotli?</p>

<p>The previous design, of course fell into the 1 packet threshold before, at ~9 kB compressed. But the new design starting at under 9 kB? it’s now 3 kB (2.3 kB with Brotli). We’re under 1/4 of the available space in the packet, meaning we have a lot of room for content. My article on <a href="https://gregdaynes.com/post/2018/09/08/getting-started-with-minitest.html">Minitest</a> which is the largest on the site comes in at 11.5 kB transferred. Still within the 1 packet. My <a href="https://gregdaynes.com/resume">Resume</a> complete with the silly SVG icons that <em>should</em> be removed, comes in at 6.62 kB. I might even be able to squeeze a headshot into the leftover space.</p>

<h2 id="what-else">What else?</h2>

<p>That’s pretty much it.</p>

<p>I made some miscellaneous changes to data structures for other refactorings, reuse of liquid snippets. Bumped Jekyll, and fixed a bug in my gems used to build and optimize CSS and HTML.</p>

<p>One thing I haven’t done yet, other than this post, is revisit the content. It’s time for a new Bio and introductory text, and some new posts about things that have been in my mind. But for now, vacation should be the only thing on my mind (this is not reasonable).</p>

<p>Reach out to me on <a href="https://mastodon.social/@gregdaynes">Mastodon</a>, or <a href="email@gregdaynes.com">email</a> with questions feedback or comments. I want to hear what you think. Is this optimization too much?</p>

<h2 id="references">References</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:4" role="doc-endnote">
      <p><a href="https://kizu.dev/fit-to-width">Kizu.dev/fit-to-width</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p><a href="https://github.com/rikschennink/fitty">Fitty</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://every-layout.dev">Every Layout</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p><a href="https://piccalil.li">Andy Bell</a> <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:11" role="doc-endnote">
      <p><a href="https://heydonworks.com">Heydon Pickering</a> <a href="#fnref:11" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://buildexcellentwebsit.es">Build Excellent Websites</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:12" role="doc-endnote">
      <p><a href="https://picocss.com">Pico.css</a> <a href="#fnref:12" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p><a href="https://meiert.com">Jens Oliver Meiert</a> <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:13" role="doc-endnote">
      <p><a href="https://leanpub.com/u/j9t">Upgrade your HTML</a> <a href="#fnref:13" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:15" role="doc-endnote">
      <p><a href="https://meiert.com/en/blog/minimal-social-markup">Minimal Social Markup</a> <a href="#fnref:15" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:14" role="doc-endnote">
      <p><a href="https://piccalil.li/blog/a-more-modern-css-reset">A More Modern CSS Reset</a> <a href="#fnref:14" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:16" role="doc-endnote">
      <p><a href="https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/">Why your website should be under 14kB in size</a> <a href="#fnref:16" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[It’s October, I’m on vacation after a very long, arduous stint building a new Theme for Shopify. Staying in a small single room cabin on the edge of the Pacific Ocean with a limited internet connection, what better place to catch up on sleep, reading, and putting some of those readings to practice.]]></summary></entry><entry><title type="html">Callable Class Instance</title><link href="https://gregdaynes.com/note/2024/07/30/callable-class-instance.html" rel="alternate" type="text/html" title="Callable Class Instance" /><published>2024-07-30T01:55:00+00:00</published><updated>2024-07-30T01:55:00+00:00</updated><id>https://gregdaynes.com/note/2024/07/30/callable-class-instance</id><content type="html" xml:base="https://gregdaynes.com/note/2024/07/30/callable-class-instance.html"><![CDATA[<p>I encountered a situation in Javascript, where I needed a Class instance that could be called like a function.</p>

<p>StackOverflow to the rescue<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">test</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">node:test</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">assert</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">node:assert/strict</span><span class="dl">'</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Callable ClassInstance</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">class</span> <span class="nc">Callable</span> <span class="kd">extends</span> <span class="nc">Function</span> <span class="p">{</span>
    <span class="nf">constructor </span><span class="p">()</span> <span class="p">{</span>
      <span class="k">super</span><span class="p">(</span><span class="dl">'</span><span class="s1">...args</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">return this.fn(...args)</span><span class="dl">'</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">fn </span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">called</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">callableInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Callable</span><span class="p">()</span>
  <span class="nf">callableInstance</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Another approach, much simpler is to define a function, then attach properties to it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Callable Object Instance</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nf">Callable</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">called</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nx">fn</span><span class="p">.</span><span class="nx">someProperty</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">prop</span><span class="dl">'</span>

    <span class="k">return</span> <span class="nx">fn</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">callableInstance</span> <span class="o">=</span> <span class="nc">Callable</span><span class="p">()</span> 
  <span class="nf">callableInstance</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>This approach breaks sharing Prototype Shapes, so too many of these will be problematic for memory<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>.</p>

<h2 id="references">References</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://stackoverflow.com/questions/49279702/calling-class-instance-as-a-function-in-javascript">Calling class instance as a function in JavaScript</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">MDN</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://mathiasbynens.be/notes/shapes-ics#shapes">JavaScript engine fundamentals: Shapes and Inline Caches</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Class instance that can be called as a function?!]]></summary></entry><entry><title type="html">Web Components</title><link href="https://gregdaynes.com/note/2024/07/29/web-components.html" rel="alternate" type="text/html" title="Web Components" /><published>2024-07-29T17:55:00+00:00</published><updated>2024-07-29T17:55:00+00:00</updated><id>https://gregdaynes.com/note/2024/07/29/web-components</id><content type="html" xml:base="https://gregdaynes.com/note/2024/07/29/web-components.html"><![CDATA[<h2 id="handleevent">handleEvent()</h2>

<p>Event handlers in javascript can take a handler function callback, or an object.
If the object has a <code class="language-plaintext highlighter-rouge">handleEvent()</code> method, that will be called when any event fires.
Debinding events works the same, pass <code class="language-plaintext highlighter-rouge">this</code> to <code class="language-plaintext highlighter-rouge">.removeEventListener('some-event', this)</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function someContext () {
  return {
    handleEvent() {
      // this will respond do any event triggered on the element
    }
  }
}

el.addEventListener('some-event', this)
</code></pre></div></div>

<p>This can lead to much simpler component markup, especially when debinding events<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<h2 id="references">References</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://gomakethings.com/the-handleevent-method-is-the-absolute-best-way-to-handle-events-in-web-components">The handleEvent() method is the absolute best way to handle events in Web Components</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Collecting snippets and tips for Web Components]]></summary></entry><entry><title type="html">Hexdump shell command</title><link href="https://gregdaynes.com/note/2024/02/10/hexdump-shell-command.html" rel="alternate" type="text/html" title="Hexdump shell command" /><published>2024-02-10T03:52:00+00:00</published><updated>2024-02-10T03:52:00+00:00</updated><id>https://gregdaynes.com/note/2024/02/10/hexdump-shell-command</id><content type="html" xml:base="https://gregdaynes.com/note/2024/02/10/hexdump-shell-command.html"><![CDATA[<p>I was asked to help understand the following command</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxd <span class="nt">-p</span> data.txt | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> | <span class="nb">sed</span> <span class="s1">'s/.{2}/0x&amp;,/g'</span> <span class="o">&gt;</span> obfuscated.txt
</code></pre></div></div>

<p>This is my breakdown</p>

<p><code class="language-plaintext highlighter-rouge">xxd -p data.txt</code> dumps the hex value of the data.
<code class="language-plaintext highlighter-rouge">tr -d '\n'</code> is deleting <code class="language-plaintext highlighter-rouge">\n</code> on each input, it’s removing newlines.
<code class="language-plaintext highlighter-rouge">sed -E 's/.{2}/0x&amp;,/g'</code> takes the single line input and checks it against the regex.</p>

<p><code class="language-plaintext highlighter-rouge">s/.{2}/0x&amp;,/g</code> breaks down to
<code class="language-plaintext highlighter-rouge">.{2}</code> which says match 2 of any non line-terminating character such as <code class="language-plaintext highlighter-rouge">\n</code>
<code class="language-plaintext highlighter-rouge">0x&amp;,</code> is then used to surround the 2 characters matched. <code class="language-plaintext highlighter-rouge">0x</code> is the prefix, <code class="language-plaintext highlighter-rouge">&amp;</code> is the stand in for the matched characters, and <code class="language-plaintext highlighter-rouge">,</code> is the suffix
<code class="language-plaintext highlighter-rouge">g</code> is the flag to run against all, not just the first match.</p>

<p>So this script it converting a multiline hexdump, into a single line, then prefixing each character pair with the the numerical constant in hex.</p>

<p><code class="language-plaintext highlighter-rouge">echo '1' | xxd -p</code> outputs <code class="language-plaintext highlighter-rouge">310a</code>.
<code class="language-plaintext highlighter-rouge">1</code> is <code class="language-plaintext highlighter-rouge">31</code> in hex <code class="language-plaintext highlighter-rouge">0a</code> is end of line.
<code class="language-plaintext highlighter-rouge">echo '1' | xxd -p | tr -d '\n'</code> outputs <code class="language-plaintext highlighter-rouge">310a%</code>  removing the line breaks from the hex dump.
<code class="language-plaintext highlighter-rouge">echo '1' | xxd -p | tr -d '\n' | sed -E 's/.{2}/0x&amp;,/g'</code> outputs <code class="language-plaintext highlighter-rouge">0x31,0x0a,</code></p>

<p>I found this task deeply enjoyable, hopefully my understanding is correct.</p>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[I was asked to help understand the following command]]></summary></entry><entry><title type="html">2024 Return of the personal life</title><link href="https://gregdaynes.com/post/2024/01/02/return-of-the-personal-site.html" rel="alternate" type="text/html" title="2024 Return of the personal life" /><published>2024-01-02T07:03:00+00:00</published><updated>2024-01-02T07:03:00+00:00</updated><id>https://gregdaynes.com/post/2024/01/02/return-of-the-personal-site</id><content type="html" xml:base="https://gregdaynes.com/post/2024/01/02/return-of-the-personal-site.html"><![CDATA[<p>Happy New Year - Welcome to 2024!</p>

<p>2023 brought a lot of changes in technology, with the availability of LLM and Generative AIs for public consumption, to the <a href="https://pluralistic.net/2023/01/21/potemkin-ai/">enshittification</a> of everything.</p>

<p>I spent much of the year as a consultant, mostly in Shopify e-commerce, location based entertainment, interactive education, and physical literacy. After leaving my research &amp; development role within the Canadian defense industry.</p>

<p>In my work and areas of reasearch, several technical themes kept reappearing throughout 2023 - outside of AI of course:</p>

<ol>
  <li>Software Maintainability</li>
  <li>Sustainable Development</li>
  <li>Fediverse and Platform Exodus</li>
  <li>Reduced role of Active-Computing</li>
</ol>

<p>While 1, 2 are self explanitory and something that will forever be a topic of discussion and professional pursuit, 3 &amp; 4 are not new, but have a renewed focus.</p>

<h3 id="fediverse-and-the-exodus---bring-on-the-indieweb">Fediverse and the Exodus - Bring on the <a href="https://indieweb.org">Indieweb</a></h3>

<p>I’m not sure I like the term indieweb, but it works for now. I’ve missed the internet of the 90s/00s, but it didn’t disappear, our attention was misplaced elsewhere. Events in 2022 and 2023 have brought the independent web back into view as some people are rebelling against centralized platforms.</p>

<p>Those platforms aren’t going to disappear anytime soon, but we can make concerted efforts to prioritize and utilize the free and open web to control our own content and publish as we see fit. The <a href="https://www.theverge.com/2023/10/23/23928550/posse-posting-activitypub-standard-twitter-tumblr-mastodon">POSSE</a> protocol is a good guidance for moving on in 2024.</p>

<h3 id="reduced-role-of-active-computing">Reduced role of Active Computing</h3>

<p>A subject I’ve been ruminating over this past year, is the role Active computing takes in our lives. Between deep work, or mindless doomscrolling, we’re actively engaging with computers to do things. This requires our time and attention to perform actions however menial. Computers are surprisingly good at doing things repeatedly and scheduled. So why do we need to actively engage to get what we want? Why isn’t it available for us when we think about it or pass by?</p>

<p>Phone lockscreens are one way to achieve this. It’s personal, and with you most of the time, but that comes with the mental burden of having the device with you and looking at it. Physical information dashboards like <a href="">magic mirrors</a> and <a href="">e-ink calendars</a> are potentially more appropriate for passive information.</p>

<p>Communication channels: Slack, Discord, Texting/SMS are all asynchronous communication but have certain expectations to be synchronous. This puts a burden on us to have our phones or laptops at the ready, to be willing to jump to answer any question asked. Bring back email, things can wait for a few hours, or days. Nothing needs immediate resoltion, and if it does, pick up the phone and call.</p>

<p><em>Email, I never thought I’d say I wanted more email, but here we are.</em></p>

<p>During Summer 2023, I was writing small applications that would fetch data from various services. My goal for each of these applications was to be fast, simple, and out of the way. They’re CLIs, which requires inputting the command into a terminal, and viewing the results. Fast + Simple were covered, single responsibility and ASCII output means there’s not a lot of room for feature creep and bloat.</p>

<p>But they were very much in-the-way, and required active computing.</p>

<p>Enter <code class="language-plaintext highlighter-rouge">cron</code>, My favourite scheduling tool from 1975. Unchanged, and unequalled for 48 years.</p>

<p><em>Did you know cron jobs will email the output of the job upon completion? Usually it’s to the local inbox on your computer, but you can configure sending to an external email address.</em></p>

<p>Pairing cron + my little CLIs, I now get emails of daily events, weather, air quality, alerts, and news without having to open separate apps, or refresh screens. I can now consume the data on my own time and schedule, that’s independent of the application.</p>

<p>This has reduced my phone use, and increased my focus on work, and life away from technology however it is still active-computing.</p>

<p>Something I haven’t explored enough yet, alert-only systems. Maybe these apps could have thresholds for when something is sent to the consumer? We use this for application monitoring when you’re network is saturated or response time exceeds 500ms, financial trading does this, so why not daily life things?</p>

<p>Schedule for the day starts earlier than usual, notification when you are getting ready for the day. Air Quality is abnormal - notification to don a mask. UV index is high and you are outside for more than a few minutes, notification put on sunscreen or seek cover. Breaking news events, aggregate and send as an email near the end of the day.</p>

<p>The last one is not actionable, it does not impact you, you can’t do anything to affect it, so move it to something you can look at when you feel like it. This is where LLMs can come in somewhat handy, rough 1-2 sentence summary of daily events, in an aggregate email. now you don’t need to check your RSS reader periodically.</p>

<p>I have more thoughts on this which I will write about as I can. If you have suggestions for apps that could be a good fit, please let me know! I’d love more of this in my life.</p>

<h3 id="where-im-going">Where I’m going</h3>

<p>Instead of resolutions for 2024, I have my goals.</p>

<p>They are to:</p>

<ul>
  <li>Own my personal platforms (this website)</li>
  <li>Automate any software task that should not need my attention or instruction to complete.</li>
  <li>Read and write more emails.</li>
  <li>Put the phone down and spend time with purpose.</li>
  <li>Reduce computer usage in favour of work and play.</li>
  <li>Make an effort to use boring and low-tech computing.</li>
</ul>

<p>What are your goals for 2024?</p>

<p><em>I started out by writing a rant around Business growth, economic layoffs, Generative AIs/LLMS, burnout and lack of caring that’s causing maintainbility and sustainable softare development to fall to the wayside, but it was really just me yelling at the clouds. I’m trying to be more proactive.</em></p>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[Happy New Year - Welcome to 2024!]]></summary></entry><entry><title type="html">Fellow Stagg Repair</title><link href="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html" rel="alternate" type="text/html" title="Fellow Stagg Repair" /><published>2023-12-28T00:00:00+00:00</published><updated>2023-12-28T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html"><![CDATA[<h3 id="problem">Problem</h3>

<p>The control knob on the base was not registering presses (which turn the kettle on and off). The kettle itself was working fine, and the temperature control was working.</p>

<h3 id="solution">Solution</h3>

<p>The base is held together with 4 screws, and 8 clips. The clips are easy to release with a flathead screwdriver. The screws are hidden under the sticker on the bottom - <em>Not the rubber pads</em>.</p>

<p><em>In my looking for the screws, I removed the feet, which caused the rubber to tear. They’re easy enough to glue back on.</em></p>

<p>The rotary encoder is situated on a daughter board fixed with 2 philips screws and connected with a ribbon cable to the main board. The cable disconnects from a JST port on the mainboard, but is soldered on the daughter board.</p>

<p>Rotary Encoder Details:</p>

<ul>
  <li>5V</li>
  <li>20 pulses</li>
  <li>13mm x 14mm</li>
</ul>

<p>I used <a href="https://www.amazon.ca/dp/B07T3672VK">these encoders</a> from Amazon.</p>

<p>Desoldering the rotary encoder was straight forward, I used a solder-sucker and wick to remove and prepare the pads. I did have to have fairly high temperature on my iron around 740 to get the factory solder to warm up.</p>

<p>Re-assembly is disassembly in reverse, be mindful of the thin wires routing around the center. Use a bit of Kapton tape to keep things in place.</p>

<h3 id="outcome">Outcome</h3>

<p>I can use my kettle again. I broke the display, but it works enough to not warrant a replacement base $100 USD from their parts shop, which when factored in CAD and shipping, is more than new kettle from a Canadian distributer.</p>

<p>I like my Fellow Stagg EKG Kettle, but I don’t think I will buy another Fellow product with electronics (I love the Prismo - Aeropress accessory).</p>

<h3 id="notes">Notes</h3>

<p>The screws use a triangle security bit, which I didn’t have on hand, however a T-6 Torx bit worked well.</p>

<p>The LCD is fixed (more than solder joints) to the main control board, which turns out is very fragile. I managed to crack the LCD even while attempting to be gentle, I didn’t touch the board except disconnect and reconnect of the rotary daughter board connector. Beware.</p>

<p>I did not measure the stem prior to this repair, the donor rotary encoder stem was much longer. Beware of this and make sure to measure and find the appropriate stem. A long one of course workse, but the knob stands above the case now, and is easier for water to find ingress into the electronics.</p>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[Outlining repair of the base for the Stag EKG Kettle by Fellow.]]></summary></entry><entry><title type="html">Hyde Decap</title><link href="https://gregdaynes.com/project/2023/12/22/hyde-decap.html" rel="alternate" type="text/html" title="Hyde Decap" /><published>2023-12-22T00:00:00+00:00</published><updated>2023-12-22T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/22/hyde-decap</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/22/hyde-decap.html"><![CDATA[<p>A plugin for Jekyll that removes some of the setup and configuration when adding Decap CMS to a Jekyll site.</p>

<p><em>The repository has instructions to get up and running.</em></p>

<ul>
  <li><a href="https://decapcms.org">Decap CMS</a></li>
  <li><a href="https://github.com/gregdaynes/hyde-decap">Hyde Decap Repo</a></li>
  <li><a href="https://rubygems.org/gems/hyde-decap">Ruby Gems</a></li>
</ul>

<h3 id="features">Features</h3>

<ul>
  <li>
    <p>Automatic creation of the /admin (or custom page), which includes the Javascript and mountpoint for Decap to load.</p>
  </li>
  <li>
    <p>It adds (Responsive Decap](https://github.com/hithismani/responsive-decap/) to provide a better mobile experience to Decap.</p>
  </li>
  <li>
    <p>Configuration for Decap CMS is through YML which Hyde Decap gets from Jekyll’s <code class="language-plaintext highlighter-rouge">_config.yml</code> instead of a standalone config.</p>
  </li>
  <li>
    <p>Provides a command for Jekyll CLI <code class="language-plaintext highlighter-rouge">jekyll decap</code> which acts like <code class="language-plaintext highlighter-rouge">jekyll serve</code>, but launches two processes, one for building and serving Jekyll and the other running a local backend for Decap CMS to connect to.</p>

    <ol>
      <li>
        <p>Serve - This is the same command as calling <code class="language-plaintext highlighter-rouge">jekyll serve</code> and any options passed to <code class="language-plaintext highlighter-rouge">jekyll decap</code> will be forwarded to <code class="language-plaintext highlighter-rouge">serve</code></p>
      </li>
      <li>
        <p><a href="https://www.npmjs.com/package/netlify-cms-proxy-server">Netlify CMS Proxy Server</a> - Facilitates local development by stubbing OAuth login and git management.</p>
      </li>
    </ol>
  </li>
</ul>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A plugin for Jekyll that removes some of the setup and configuration when adding Decap CMS to a Jekyll site.]]></summary></entry><entry><title type="html">Fixing Hombrew permissions when using ASDF</title><link href="https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions.html" rel="alternate" type="text/html" title="Fixing Hombrew permissions when using ASDF" /><published>2023-12-08T00:00:00+00:00</published><updated>2023-12-08T00:00:00+00:00</updated><id>https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions</id><content type="html" xml:base="https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions.html"><![CDATA[<p>Ruby Gem management with ASDF-VM sometimes encounters issues with permissions when using bundler to manage gems. I haven’t gotten to the root-cause, but this snippet helps in fixing the permissions.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nt">-R</span> <span class="si">$(</span><span class="nb">whoami</span><span class="si">)</span> <span class="si">$(</span>brew <span class="nt">--prefix</span><span class="si">)</span>/<span class="k">*</span>
</code></pre></div></div>

<p>Original post on <a href="https://stackoverflow.com/questions/16432071/how-to-fix-homebrew-permissions">Stackoverflow</a></p>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Ruby Gem management with ASDF-VM sometimes encounters issues with permissions when using bundler to manage gems.]]></summary></entry><entry><title type="html">Hyde Page CSS &amp;amp; JS</title><link href="https://gregdaynes.com/project/2023/12/04/hyde-page-css-js.html" rel="alternate" type="text/html" title="Hyde Page CSS &amp;amp; JS" /><published>2023-12-04T00:00:00+00:00</published><updated>2023-12-04T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/04/hyde-page-css-js</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/04/hyde-page-css-js.html"><![CDATA[<p>Hyde Page CSS / JS are plugins that provide the ability to declare CSS and JS in the frontmatter of a page or layout.</p>

<p><em>The repository has instructions to get up and running.</em></p>

<ul>
  <li><a href="https://github.com/gregdaynes/hyde-page-css">Hyde Page CSS Repo</a></li>
  <li>
    <p><a href="https://rubygems.org/gems/hyde-page-css">Ruby Gems</a></p>
  </li>
  <li><a href="https://github.com/gregdaynes/hyde-page-js">Hyde Page JS Repo</a></li>
  <li><a href="https://rubygems.org/gems/hyde-page-js">Ruby Gems</a></li>
</ul>

<h3 id="preamble">Preamble</h3>

<p>These gems eschew the firmly established pattern of bundle your CSS and JS files together and serving them as single payloads.</p>

<p>This may be a bad idea in the long run, but so far, it’s been successful for the sites I’ve used them and their predecessors on.</p>

<h3 id="features">Features</h3>

<ul>
  <li>
    <p>Frontmatter option <code class="language-plaintext highlighter-rouge">css</code> or <code class="language-plaintext highlighter-rouge">js</code> which takes an array of file names in the <code class="language-plaintext highlighter-rouge">/assets/css</code> or <code class="language-plaintext highlighter-rouge">/assets/js</code> folder. Thes files are concatenated, minified and fingerprinted.</p>
  </li>
  <li>
    <p>Adds absolute urls to <code class="language-plaintext highlighter-rouge">page.css_files</code> or <code class="language-plaintext highlighter-rouge">page.js_files</code> for adding link tags to the page through liquid.</p>
  </li>
  <li>
    <p>Heirarchy of Layouts - with Jekyll, a page may have 0 or more layouts, in a heriarchical fasion, for example: <code class="language-plaintext highlighter-rouge">base.html &gt; blog.hmtl &gt; post.html &gt; page</code>
Each layout and page can have as many CSS/JS files as wanted, but will be concatenated to a single file per layout/page in the heirarchy.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A pair of plugins that provide frontmatter options to include CSS and JS files on specific pages and layouts.]]></summary></entry><entry><title type="html">Hyde Fonts</title><link href="https://gregdaynes.com/project/2023/12/03/hyde-fonts.html" rel="alternate" type="text/html" title="Hyde Fonts" /><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/03/hyde-fonts</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/03/hyde-fonts.html"><![CDATA[<p>A plugin for Jekyll that automates adding Google Fonts to your site.</p>

<p><em>The repository has instructions to get up and running.</em></p>

<ul>
  <li><a href="https://github.com/gregdaynes/hyde-fonts">Hyde Fonts Repo</a></li>
  <li><a href="https://rubygems.org/gems/hyde-fonts">Ruby Gems</a></li>
</ul>

<h3 id="features">Features</h3>

<ul>
  <li>
    <p>Utilizes a configuration file to specify fonts and variants to include in your site.</p>
  </li>
  <li>
    <p>Creates CSS declrations for each font.</p>
    <ul>
      <li>
        <p>This can be included as a file or inline with other CSS on your site.</p>
      </li>
      <li>
        <p>Exposes a liquid tag <code class="language-plaintext highlighter-rouge">{% hyde_fonts link %}</code> to include  the fonts in your site using a link tag. Or <code class="language-plaintext highlighter-rouge">{% hyde_fonts inline %}</code> to include the CSS for inclusion in other CSS files or <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> tags.</p>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A plugin for Jekyll that automates adding Google Fonts to your site.]]></summary></entry></feed>