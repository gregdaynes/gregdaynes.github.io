<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gregdaynes.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gregdaynes.com/" rel="alternate" type="text/html" /><updated>2024-01-02T06:11:20+00:00</updated><id>https://gregdaynes.com/feed.xml</id><title type="html">Greg Daynes</title><subtitle>The website and home of Gregory Daynes. Find links to projects, notebooks, and resume.</subtitle><entry><title type="html">Fellow Stagg Repair</title><link href="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html" rel="alternate" type="text/html" title="Fellow Stagg Repair" /><published>2023-12-28T00:00:00+00:00</published><updated>2023-12-28T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html"><![CDATA[<h3 id="problem">Problem</h3>

<p>The control knob on the base was not registering presses (which turn the kettle on and off). The kettle itself was working fine, and the temperature control was working.</p>

<h3 id="solution">Solution</h3>

<p>The base is held together with 4 screws, and 8 clips. The clips are easy to release with a flathead screwdriver. The screws are hidden under the sticker on the bottom - <em>Not the rubber pads</em>.</p>

<p><em>In my looking for the screws, I removed the feet, which caused the rubber to tear. They’re easy enough to glue back on.</em></p>

<p>The rotary encoder is situated on a daughter board fixed with 2 philips screws and connected with a ribbon cable to the main board. The cable disconnects from a JST port on the mainboard, but is soldered on the daughter board.</p>

<p>Rotary Encoder Details:</p>

<ul>
  <li>5V</li>
  <li>20 pulses</li>
  <li>13mm x 14mm</li>
</ul>

<p>I used <a href="https://www.amazon.ca/dp/B07T3672VK">these encoders</a> from Amazon.</p>

<p>Desoldering the rotary encoder was straight forward, I used a solder-sucker and wick to remove and prepare the pads. I did have to have fairly high temperature on my iron around 740 to get the factory solder to warm up.</p>

<p>Re-assembly is disassembly in reverse, be mindful of the thin wires routing around the center. Use a bit of Kapton tape to keep things in place.</p>

<h3 id="notes">Notes</h3>

<p>The screws use a triangle security bit, which I didn’t have on hand, however a T-6 Torx bit worked well.</p>

<p>The LCD is fixed to the main control board, which proves to be very fragile. I managed to crack the LCD even while attempting to be gentle. Beware.</p>

<p>I did not measure the stem prior to this repair, the donor rotary encoder stem was much longer. Beware of this and make sure to measure and find the appropriate stem. A long one of course workse, but the knob stands above the case now, and is easier for water to find ingress into the electronics.</p>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[Outlining repair of the base for the Stag EKG Kettle by Fellow.]]></summary></entry><entry><title type="html">Hyde Decap</title><link href="https://gregdaynes.com/project/2023/12/22/hyde-decap.html" rel="alternate" type="text/html" title="Hyde Decap" /><published>2023-12-22T00:00:00+00:00</published><updated>2023-12-22T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/22/hyde-decap</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/22/hyde-decap.html"><![CDATA[<p>A plugin for Jekyll that removes some of the setup and configuration when adding Decap CMS to a Jekyll site.</p>

<p><em>The repository has instructions to get up and running.</em></p>

<ul>
  <li><a href="https://decapcms.org">Decap CMS</a></li>
  <li><a href="https://github.com/gregdaynes/hyde-decap">Hyde Decap Repo</a></li>
  <li><a href="https://rubygems.org/gems/hyde-decap">Ruby Gems</a></li>
</ul>

<h3 id="features">Features</h3>

<ul>
  <li>
    <p>Automatic creation of the /admin (or custom page), which includes the Javascript and mountpoint for Decap to load.</p>
  </li>
  <li>
    <p>It adds (Responsive Decap](https://github.com/hithismani/responsive-decap/) to provide a better mobile experience to Decap.</p>
  </li>
  <li>
    <p>Configuration for Decap CMS is through YML which Hyde Decap gets from Jekyll’s <code class="language-plaintext highlighter-rouge">_config.yml</code> instead of a standalone config.</p>
  </li>
  <li>
    <p>Provides a command for Jekyll CLI <code class="language-plaintext highlighter-rouge">jekyll decap</code> which acts like <code class="language-plaintext highlighter-rouge">jekyll serve</code>, but launches two processes, one for building and serving Jekyll and the other running a local backend for Decap CMS to connect to.</p>

    <ol>
      <li>
        <p>Serve - This is the same command as calling <code class="language-plaintext highlighter-rouge">jekyll serve</code> and any options passed to <code class="language-plaintext highlighter-rouge">jekyll decap</code> will be forwarded to <code class="language-plaintext highlighter-rouge">serve</code></p>
      </li>
      <li>
        <p><a href="https://www.npmjs.com/package/netlify-cms-proxy-server">Netlify CMS Proxy Server</a> - Facilitates local development by stubbing OAuth login and git management.</p>
      </li>
    </ol>
  </li>
</ul>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A plugin for Jekyll that removes some of the setup and configuration when adding Decap CMS to a Jekyll site.]]></summary></entry><entry><title type="html">Fixing Hombrew permissions when using ASDF</title><link href="https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions.html" rel="alternate" type="text/html" title="Fixing Hombrew permissions when using ASDF" /><published>2023-12-08T00:00:00+00:00</published><updated>2023-12-08T00:00:00+00:00</updated><id>https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions</id><content type="html" xml:base="https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions.html"><![CDATA[<p>Ruby Gem management with ASDF-VM sometimes encounters issues with permissions when using bundler to manage gems. I haven’t gotten to the root-cause, but this snippet helps in fixing the permissions.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nt">-R</span> <span class="si">$(</span><span class="nb">whoami</span><span class="si">)</span> <span class="si">$(</span>brew <span class="nt">--prefix</span><span class="si">)</span>/<span class="k">*</span>
</code></pre></div></div>

<p>Original post on <a href="https://stackoverflow.com/questions/16432071/how-to-fix-homebrew-permissions">Stackoverflow</a></p>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Ruby Gem management with ASDF-VM sometimes encounters issues with permissions when using bundler to manage gems.]]></summary></entry><entry><title type="html">Hyde Page CSS &amp;amp; JS</title><link href="https://gregdaynes.com/project/2023/12/04/hyde-page-css-js.html" rel="alternate" type="text/html" title="Hyde Page CSS &amp;amp; JS" /><published>2023-12-04T00:00:00+00:00</published><updated>2023-12-04T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/04/hyde-page-css-js</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/04/hyde-page-css-js.html"><![CDATA[<p>Hyde Page CSS / JS are plugins that provide the ability to declare CSS and JS in the frontmatter of a page or layout.</p>

<p><em>The repository has instructions to get up and running.</em></p>

<ul>
  <li><a href="https://github.com/gregdaynes/hyde-page-css">Hyde Page CSS Repo</a></li>
  <li>
    <p><a href="https://rubygems.org/gems/hyde-page-css">Ruby Gems</a></p>
  </li>
  <li><a href="https://github.com/gregdaynes/hyde-page-js">Hyde Page JS Repo</a></li>
  <li><a href="https://rubygems.org/gems/hyde-page-js">Ruby Gems</a></li>
</ul>

<h3 id="preamble">Preamble</h3>

<p>These gems eschew the firmly established pattern of bundle your CSS and JS files together and serving them as single payloads.</p>

<p>This may be a bad idea in the long run, but so far, it’s been successful for the sites I’ve used them and their predecessors on.</p>

<h3 id="features">Features</h3>

<ul>
  <li>
    <p>Frontmatter option <code class="language-plaintext highlighter-rouge">css</code> or <code class="language-plaintext highlighter-rouge">js</code> which takes an array of file names in the <code class="language-plaintext highlighter-rouge">/assets/css</code> or <code class="language-plaintext highlighter-rouge">/assets/js</code> folder. Thes files are concatenated, minified and fingerprinted.</p>
  </li>
  <li>
    <p>Adds absolute urls to <code class="language-plaintext highlighter-rouge">page.css_files</code> or <code class="language-plaintext highlighter-rouge">page.js_files</code> for adding link tags to the page through liquid.</p>
  </li>
  <li>
    <p>Heirarchy of Layouts - with Jekyll, a page may have 0 or more layouts, in a heriarchical fasion, for example: <code class="language-plaintext highlighter-rouge">base.html &gt; blog.hmtl &gt; post.html &gt; page</code>
Each layout and page can have as many CSS/JS files as wanted, but will be concatenated to a single file per layout/page in the heirarchy.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A pair of plugins that provide frontmatter options to include CSS and JS files on specific pages and layouts.]]></summary></entry><entry><title type="html">Hyde Fonts</title><link href="https://gregdaynes.com/project/2023/12/03/hyde-fonts.html" rel="alternate" type="text/html" title="Hyde Fonts" /><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/03/hyde-fonts</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/03/hyde-fonts.html"><![CDATA[A plugin for Jekyll that automates adding Google Fonts to your site.

_The repository has instructions to get up and running._

- [Hyde Fonts Repo](https://github.com/gregdaynes/hyde-fonts)
- [Ruby Gems](https://rubygems.org/gems/hyde-fonts)

### Features

- Utilizes a configuration file to specify fonts and variants to include in your site.

- Creates CSS declrations for each font.
   - This can be included as a file or inline with other CSS on your site.

   - Exposes a liquid tag `<link href='/assets/fonts/fonts.css' rel='stylesheet'>` to include  the fonts in your site using a link tag. Or `@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url(/assets/fonts/Inter_normal_400_cyrillic-ext.woff2) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url(/assets/fonts/Inter_normal_400_cyrillic.woff2) format("woff2");unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url(/assets/fonts/Inter_normal_400_greek-ext.woff2) format("woff2");unicode-range:U+1F00-1FFF}@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url(/assets/fonts/Inter_normal_400_greek.woff2) format("woff2");unicode-range:U+0370-03FF}@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url(/assets/fonts/Inter_normal_400_vietnamese.woff2) format("woff2");unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB}@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url(/assets/fonts/Inter_normal_400_latin-ext.woff2) format("woff2");unicode-range:U+0100-02AF,U+0304,U+0308,U+0329,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url(/assets/fonts/Inter_normal_400_latin.woff2) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}@font-face{font-family:"Inter";font-style:normal;font-weight:800;font-display:swap;src:url(/assets/fonts/Inter_normal_800_cyrillic-ext.woff2) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:"Inter";font-style:normal;font-weight:800;font-display:swap;src:url(/assets/fonts/Inter_normal_800_cyrillic.woff2) format("woff2");unicode-range:U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:"Inter";font-style:normal;font-weight:800;font-display:swap;src:url(/assets/fonts/Inter_normal_800_greek-ext.woff2) format("woff2");unicode-range:U+1F00-1FFF}@font-face{font-family:"Inter";font-style:normal;font-weight:800;font-display:swap;src:url(/assets/fonts/Inter_normal_800_greek.woff2) format("woff2");unicode-range:U+0370-03FF}@font-face{font-family:"Inter";font-style:normal;font-weight:800;font-display:swap;src:url(/assets/fonts/Inter_normal_800_vietnamese.woff2) format("woff2");unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+0300-0301,U+0303-0304,U+0308-0309,U+0323,U+0329,U+1EA0-1EF9,U+20AB}@font-face{font-family:"Inter";font-style:normal;font-weight:800;font-display:swap;src:url(/assets/fonts/Inter_normal_800_latin-ext.woff2) format("woff2");unicode-range:U+0100-02AF,U+0304,U+0308,U+0329,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:"Inter";font-style:normal;font-weight:800;font-display:swap;src:url(/assets/fonts/Inter_normal_800_latin.woff2) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}` to include the CSS for inclusion in other CSS files or `<style>` tags.]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A plugin for Jekyll that automates adding Google Fonts to your site.]]></summary></entry><entry><title type="html">Turing Pi</title><link href="https://gregdaynes.com/project/2023/11/11/turing-pi.html" rel="alternate" type="text/html" title="Turing Pi" /><published>2023-11-11T00:00:00+00:00</published><updated>2023-11-11T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/11/11/turing-pi</id><content type="html" xml:base="https://gregdaynes.com/project/2023/11/11/turing-pi.html"><![CDATA[<h3 id="turing-pi">Turing Pi</h3>

<p><a href="https://turingpi.com/product/turing-pi-2/">Turing Pi 2</a>
<a href="https://docs.turingpi.com/docs">docs</a></p>

<h3 id="mini-atx-case">Mini ATX Case</h3>

<p><a href="https://www.amazon.ca/ZZEW-Mini-ITX-Computer-Aluminum-Reverse/dp/B0BX2KQV8M">ZZEW Mini ITX</a></p>

<h3 id="rotate-touch-interface-to-match-90deg-screen-rotation">Rotate touch interface to match 90deg screen rotation</h3>

<p>https://forums.raspberrypi.com/viewtopic.php?t=324035</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dtoverlay=vc4-kms-v3d
dtoverlay=vc4-kms-dsi-7inch,swapxy,invx
max_framebuffers=2
ignore_lcd=1
</code></pre></div></div>

<h3 id="external-power-switch">External Power Switch</h3>

<p><a href="https://howchoo.com/pi/how-to-add-a-power-button-to-your-raspberry-pi/">Rpi 4 Power Switch</a></p>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[The Turing Pi is a clustering mainboard for various single board computers providing up to 4 modules.]]></summary></entry><entry><title type="html">Cupped Brews — Code Demonstrations &amp;amp; Experiments</title><link href="https://gregdaynes.com/post/2021/09/19/cupped-brews.html" rel="alternate" type="text/html" title="Cupped Brews — Code Demonstrations &amp;amp; Experiments" /><published>2021-09-19T00:00:00+00:00</published><updated>2021-09-19T00:00:00+00:00</updated><id>https://gregdaynes.com/post/2021/09/19/cupped-brews</id><content type="html" xml:base="https://gregdaynes.com/post/2021/09/19/cupped-brews.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#lazy-short-urls" id="markdown-toc-lazy-short-urls">Lazy Short URLS</a></li>
  <li><a href="#composability-with-entity-component-systems" id="markdown-toc-composability-with-entity-component-systems">Composability with Entity-Component Systems</a></li>
  <li><a href="#redis-recovery" id="markdown-toc-redis-recovery">Redis Recovery</a></li>
  <li><a href="#sweepline" id="markdown-toc-sweepline">Sweepline</a></li>
  <li><a href="#context-aware-logging" id="markdown-toc-context-aware-logging">Context-Aware Logging</a></li>
  <li><a href="#envar-loading" id="markdown-toc-envar-loading">Envar Loading</a></li>
  <li><a href="#cli--binary-artifact" id="markdown-toc-cli--binary-artifact">CLI / Binary Artifact</a></li>
  <li><a href="#app-example" id="markdown-toc-app-example">App Example</a></li>
</ul>

<p>I realize how disorganized my Github repository list has become. Until I tidy it, this list will serve as <em>things I have worked on recently</em>.</p>

<h2 id="lazy-short-urls">Lazy Short URLS</h2>

<p>Repo: <a href="https://github.com/gregdaynes/shortr">gregdaynes/shortr</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run application web server on port 3000</span>
<span class="nv">$ </span>npm start
</code></pre></div></div>

<p>Recently when a friend was interviewing for a job, one of the code challenges was to create a url shortener. I decided to give it a try.</p>

<ul>
  <li>Encode the recieved url with HMAC from Node’s internal crypto library - <a href="https://github.com/gregdaynes/shortr/blob/492cb8fe770fef12ac8ca8f1c291413f3f0c82df/index.mjs#L36-L41">Link</a></li>
  <li>Append an entry <code class="language-plaintext highlighter-rouge">${hash}:${url}</code> to a plaintext file - <a href="https://github.com/gregdaynes/shortr/blob/492cb8fe770fef12ac8ca8f1c291413f3f0c82df/index.mjs#L47-L48">link</a></li>
  <li>Stores hash:url in a Set (Restored from the plaintext file on start) - <a href="https://github.com/gregdaynes/shortr/blob/492cb8fe770fef12ac8ca8f1c291413f3f0c82df/index.mjs#L7-L20">link</a></li>
</ul>

<h2 id="composability-with-entity-component-systems">Composability with Entity-Component Systems</h2>

<p>Repo: <a href="https://github.com/gregdaynes/entity-component">gregdaynes/entity-component</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run application, stdout JSON data results</span>
<span class="nv">$ </span>npm start

<span class="c"># Run application with profiling data, stdout pretty JSON data &amp; performance metrics/telemetry</span>
<span class="nv">$ </span>npm run profile
</code></pre></div></div>

<p>An exploration of Entity-Component System pattern used in game development. I wanted to see if the pattern could help with legibility and composability.</p>

<p>While not as performant as the original implementation. EC proved to be a happy in-between performance and maintainability. I found it to be like <a href="/function-composition">Function Composition</a> as well as way more memory efficient (this is where EC proves it’s value).</p>

<p>The concept is for entites to act as containers of data with a global unique dentifier. The logic exists outside of the entities in systems. Each system operates on entities which have the components the system knows about. Usually a system performs arithmetic, which makes it fast and efficient.</p>

<p>This served as a place to experiment with the new <a href="https://nodejs.org/dist/latest-v16.x/docs/api/perf_hooks.html#perf_hooks_performance_measurement_apis">Performance Hooks</a> API.</p>

<ul>
  <li>Choosing to write this using Classes instead of Prototype, I found it to be more legible. Programmers coming from OOP languages like Ruby makes this easier to understand.</li>
  <li>For/of loops and if/else blocks are also used instead of collection methods like map/reduce. Ease for programmers of all levels to understand without Javascript collections knowledge. And keep me away from long method chains.</li>
  <li>Main loop which performs 100,000 frames (iterations) of systems over the entities - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/index.js#L60-L75">link</a></li>
  <li>Entity factory shows creation of entities with their components- <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/factory-ship.js">link</a></li>
  <li>Customizing entities with more components - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/index.js#L43-L50">link</a></li>
  <li>Entity Manager which maintains collections of entities and their components - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/lib/entity-manager.js">link</a></li>
  <li>Wrapper for perf hooks - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/lib/perf.js">link</a></li>
</ul>

<p>I’m still exploring the posibile applications of an EC-like pattern outside of games.</p>

<h2 id="redis-recovery">Redis Recovery</h2>

<p>Repo: <a href="https://github.com/gregdaynes/redis-recovery">gregdaynes/redis-recovery</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># I don't recommend running this application - Bull queue data + env is required</span>
</code></pre></div></div>

<p>This script came out of a need one Saturday where an applications job queue was not working as expected. <em>I am fuzzy on details of what had ocurred</em>. It might been from moving job data over to an Elixir application. I attempted fixing with several Redis admin tools, but the dataset ended up being too large.</p>

<ul>
  <li>Uses event emitter, which was nice for developing in a pipeline style, while ignoring order.</li>
  <li>This was my first Node ESM module.</li>
  <li>In hindsight the use of Redis instead of IO Redis made things more annoying Promisify - <a href="https://github.com/gregdaynes/redis-recovery/blob/965d236cb8671c42d32c4b54ff03e05aa6e2b116/index.js#L7-L11">link</a></li>
  <li>I am not sure why I used promisify with <code class="language-plaintext highlighter-rouge">node:fs/appendFile</code> when a better option would be to use <code class="language-plaintext highlighter-rouge">node:fs/promises</code> - <a href="https://github.com/gregdaynes/redis-recovery/blob/965d236cb8671c42d32c4b54ff03e05aa6e2b116/index.js#L11">link</a></li>
</ul>

<h2 id="sweepline">Sweepline</h2>

<p>Repo: <a href="https://github.com/gregdaynes/sweepline">gregdaynes/sweepline</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run application, stdout JSON data results</span>
<span class="nv">$ </span>npm start
</code></pre></div></div>

<p>This is a modified and incomplete implementation of the <a href="https://en.wikipedia.org/wiki/Sweep_line_algorithm">Sweep Line algorithm</a>. I developed this to take a small set of around 100k objects, containing key date data. The goal was to group the objects based on their dates, without overlapping. Objects could span many group. Additionally the function needed to be isomorphic, and fast enough that it would not block rendering (60fps) in the browser.</p>

<p>A visualization of the data, and desired output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
                  ┌─────┐
                  │  C  │
                  └─────┘
    ┌───┐ ┌────┐      ┌─────────┐
    │ B │ │ B  │      │    B    │
    └───┘ └────┘      └─────────┘
 ┌──────────┐  ┌───┐         ┌───┐
 │    A     │  │ A │         │ A │
 └──────────┘  └───┘         └───┘
──────────────────────────────────▶
               Time

Results
 ┌──┬───┬─┬─┬──┬──┬┬──┬─┬────┬──┬┐
─┴──┴───┴─┴─┴──┴──┴┴──┴─┴────┴──┴┴▶
  A   A  A A B  A  A C B   B  A A
      B    B       C   C      B
</code></pre></div></div>

<p>Sweepline proved to be useful in a few areas of the application. Cleaning up logic unique to each implementation which was</p>
<ul>
  <li>illegible—nested foreach loops</li>
  <li>terse—nested ternary</li>
  <li>untested—untestable code</li>
</ul>

<h2 id="context-aware-logging">Context-Aware Logging</h2>

<p>Repo: <a href="https://github.com/gregdaynes/chip-log">gregdaynes/chip-log</a></p>

<p>Readme in repository has a breakdown of installation and usage.</p>

<p>One of the last projects I used Express on, had logging issues.</p>
<ul>
  <li>Context between backend services,</li>
  <li>performance constraints,</li>
  <li>PII in the output.</li>
</ul>

<p>Chip Log is a wrapper around PinoJS (a recommended replacement for other loggers like Morgan and Winston).</p>

<p>I no longer work to maintain this module. Instead directing attention to Fastify which has existing extensions providing these features. It should still work. The inspector will <em>probably</em> break on Node 15+ and definitely can’t operate in ESM mode.</p>

<h2 id="envar-loading">Envar Loading</h2>

<p>Repo: <a href="https://github.com/gregdaynes/env">gregdaynes/env</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Start node repl with envars
$ node -r ./env-loader.js

# node repl
&gt; console.log(process.env)
</code></pre></div></div>

<p>Envars are one of those things that seems to bite new members to a project. Most of the time they’re not documented, typed, and local setups gain invalid values over time. I wanted a way to simplify the process, as well as provide useful information to the developer.</p>

<ul>
  <li>Use JSON Schema to parse, validate, and provide defaults for values - <a href="https://github.com/gregdaynes/env/blob/e6642323fc450e18cb1b80dfccad17f7fc99751d/env-schema.js">link</a></li>
  <li>Uses common .env file with newline separated KEY=VALUE entries.</li>
  <li><code class="language-plaintext highlighter-rouge">TEST_</code> prefixed values will override un-prefixed values in NODE_ENV=test to avoid having multiple .env.* files.</li>
</ul>

<h2 id="cli--binary-artifact">CLI / Binary Artifact</h2>

<p>Repo: <a href="https://github.com/gregdaynes/pkg-test">gregdaynes/pkg-test</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Build binaries
$ npm run build

# Run Binary
# ./pkg-test
</code></pre></div></div>

<p>A friend asked if it was possible to create binaries of a node application like Deno. I figured it would be a solved-problem, but didn’t realize how easy it would be. Using Vercel’s PKG package, it <em>just</em> works.</p>

<p><em>Note:</em> This repo currently does not compile or execute on M1 Macs. I haven’t bothered to investigate, but should be reasonable to resolve.</p>

<h2 id="app-example">App Example</h2>

<p>Repo: <a href="https://github.com/gregdaynes/app-example">app-example</a></p>

<p>Readme in repository has in-depth documentation on the organization, cli, code generation, testing, database.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install modules for each area of the application</span>
<span class="nv">$ </span>npm run setup

<span class="c"># Add required keyvalues to .env</span>
<span class="c"># starting the application will inform you what required values are missing</span>
<span class="c"># you can use the following</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>supersecret
<span class="nv">DB_CLIENT</span><span class="o">=</span>mysql
<span class="nv">DB_USER</span><span class="o">=</span>root
<span class="nv">DB_PASSWORD</span><span class="o">=</span>root
<span class="nv">DB_DATABASE</span><span class="o">=</span>app
<span class="nv">DB_HOST</span><span class="o">=</span>127.0.0.1
<span class="nv">DB_PORT</span><span class="o">=</span>3306
<span class="nv">TEST_DB_CLIENT</span><span class="o">=</span>sqlite3
<span class="nv">TEST_DB_FILENAME</span><span class="o">=</span>:memory:
<span class="nv">TEST_DB_POOL_MIN</span><span class="o">=</span>1
<span class="nv">TEST_DB_POOL_MAX</span><span class="o">=</span>1

<span class="c"># Setup Database</span>
<span class="c"># if you don't have a local MySQL install, you can use the docker compose file included in this project to set up quickly.</span>
<span class="c"># Note that the envars for MYSQL_ROOT_PASSWORD and MYSQL_DATABASE need to be defined in .env before running the following command.</span>
<span class="nv">$ </span>docker compose up <span class="nt">-d</span>

<span class="c"># Migrate + Seed database</span>
<span class="c"># you can use the script `db` to perform operations with KnexJS or use the CLI</span>
<span class="nv">$ </span>npm run cli

<span class="nv">$ </span>npm run db <span class="nt">--</span> migrate:latest
<span class="nv">$ </span>npm run db <span class="nt">--</span> seed:run

<span class="c"># Running API Server</span>
<span class="nv">$ </span>npm run start:api
<span class="c"># pino-pretty can provide cleaner stdout logs for dev</span>
<span class="nv">$ </span>npm run start:api | npx pino-pretty

<span class="c"># Running Tests</span>
<span class="c"># app tests</span>
<span class="nv">$ </span>npm run <span class="nb">test</span>:app
<span class="c"># api tests</span>
<span class="nv">$ </span>npm run <span class="nb">test</span>:api
<span class="c"># api &amp; app tests</span>
<span class="nv">$ </span>npm run <span class="nb">test</span>
</code></pre></div></div>

<p>A <em>mostly</em> complete example for a monolith, which is also suitable for building “microservices”.</p>

<ul>
  <li>Mocha used as test runner for both the Api and the frontend (frontend excluded from this repository). I would personally choose to use <a href="https://www.npmjs.com/package/tap">tap</a> for the Api, and Jest for the Frontend. I dislike Jest for testing Node because of the changes made to the runtime. There are also issues with slow adoption of newer capabilities (because of the these changes)—eg: ESM</li>
  <li>Replacing the database with SQLite when testing has been a positive choice for fast development (TDD). Given the choice again I would opt to use an in-memory-tuned instance of the production database for integration testing.</li>
  <li>No workspaces. I ran into an issue with other developers NPM not working with the <em>then new</em> workspace feature (NPM @ 7). Yarn would have worked for this, as well as PNPM.</li>
  <li>Hygen for generating code based on <code class="language-plaintext highlighter-rouge">ejs</code> templates - <a href="https://www.npmjs.com/package/copy-template-dir">copy-template-dir</a> or similar.</li>
  <li>CLI came after most of the application and web interface was complete. Nowadays I would build the CLI in parallel with the application logic. This benefits development by not having to remember REPL commands or building out administration uis.</li>
</ul>

<p>The repository contains <code class="language-plaintext highlighter-rouge">app-example-requests.paw</code> and <code class="language-plaintext highlighter-rouge">app-example-requests-postman.json</code> for interacting with the api through Paw or Postman.</p>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[Collected projects and playgrounds. Most often to figure out a problem for work, also for fun.]]></summary></entry><entry><title type="html">Function Composition</title><link href="https://gregdaynes.com/post/2020/08/24/function-composition.html" rel="alternate" type="text/html" title="Function Composition" /><published>2020-08-24T00:00:00+00:00</published><updated>2020-08-24T00:00:00+00:00</updated><id>https://gregdaynes.com/post/2020/08/24/function-composition</id><content type="html" xml:base="https://gregdaynes.com/post/2020/08/24/function-composition.html"><![CDATA[<p>This is a quick look at applying one of the core concepts in functional programming - Composition.</p>

<p>Starting with a simple function that takes a number as value and adds 2.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">addTwo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">value</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<p>Another function that multiplies a value by 3.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">timesThree</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">value</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>

<p>Putting the functions to use, we can write something like</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="nf">addTwo</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">z</span> <span class="o">=</span> <span class="nf">timesThree</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
</code></pre></div></div>

<p>When run, it yields 9.</p>

<p>Another way to write this without the intermediate variables</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nf">timesThree</span><span class="p">(</span><span class="nf">addTwo</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</code></pre></div></div>

<p>Again yields 9, but is slightly awkward to read at a glance.</p>

<p><em>This is an example of Javascripts first class functions. We can use them as variables, and use them as values in other functions.</em></p>

<p>It works the same as the more verbose way, read from right to left. Starting with the value <code class="language-plaintext highlighter-rouge">1</code>, then passing that as an argument to <code class="language-plaintext highlighter-rouge">addTwo</code>, once again passing that as a param, this time to <code class="language-plaintext highlighter-rouge">timesThree</code>.</p>

<p>We can use composition to help us make it easier to read (this is also called Currying or Piping). There is one caveat; the composed functions can only have an arrity of 1 (they can only take 1 argument). Luckily for our simple functions above, they take 1 argument, and return 1 value. Ideal candidates for composition.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">compose</span><span class="p">(...</span><span class="nx">fns</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="nf">compose</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">fns</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">v</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">v</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">fn</span><span class="p">),</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="nx">input</span><span class="p">));</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This compose function, takes a list of functions as arguments, and returns a new instance of the function that takes an argument which the original list of functions are applied in order.</p>

<p><strong>bonus, this handles promises returned from functions</strong></p>

<p>This is a slightly different approach from some userland libraries that offer composition/currying. They are usually read right to left because of how we pass in the first argument.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">compose</span><span class="p">(</span><span class="nx">addTwo</span><span class="p">,</span> <span class="nx">timesThree</span><span class="p">)(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<p>This looks pretty good. A quick glance gets the majority of how it works, but the <code class="language-plaintext highlighter-rouge">1</code> seems out of place. With only a handful of operations it’s not a problem. It starts to break down when you have many operations that are being done.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">life</span> <span class="o">=</span> <span class="nf">compose</span><span class="p">(</span>
  <span class="nx">drinkCoffee</span><span class="p">,</span>
  <span class="nx">eatBiscuit</span><span class="p">,</span>
  <span class="nx">playVideogame</span><span class="p">,</span>
  <span class="nx">sleep</span><span class="p">,</span>
  <span class="nx">drinkCoffee</span><span class="p">,</span>
  <span class="nx">gotoWork</span>
<span class="p">)(</span><span class="dl">"</span><span class="s2">greg</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>Reading the variable, then understanding that a composition is about to occurr, jump to the end, figure out what the argument is, jump back to the compose and read what is about to happen. Again, this is where having it read right to left might be preferable.</p>

<p>A very simple and quick fix for this is to define the initial value as the first argument in the list of functions. We’ll call this <code class="language-plaintext highlighter-rouge">pipe</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">pipe</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="p">...</span><span class="nx">fns</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">compose</span><span class="p">(...</span><span class="nx">fns</span><span class="p">)(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can move the initial value to the start of the list of arguments.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">life</span> <span class="o">=</span> <span class="nf">compose</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">greg</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">drinkCoffee</span><span class="p">,</span>
  <span class="nx">eatBiscuit</span><span class="p">,</span>
  <span class="nx">playVideogame</span><span class="p">,</span>
  <span class="nx">sleep</span><span class="p">,</span>
  <span class="nx">drinkCoffee</span><span class="p">,</span>
  <span class="nx">gotoWork</span>
<span class="p">);</span>
</code></pre></div></div>

<p>That’s it. A brief look at function composition.</p>

<p>There’s still the issue of having each function take a single argument. The quick solution is Objects/Enums as the input/output of each function. Typechecking tools help here in figuring out what the IO for each step is.</p>

<p>Another solution, which I tend to reach for is to embrace the single argument functions, but make each function in the list, also return a function. That was worded horribly, here’s an example.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">value</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">multiply</span> <span class="o">=</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">value</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>

<span class="nf">pipe</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">multiply</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</code></pre></div></div>

<p>This yields 9 again, and gives the functions more flexibility/configurability without too much extra work.</p>

<p>This method is not ideal, but can help keep things simple when getting into function composition.</p>

<p>Here’s a real world example of function composition, that is not one of these trivial <code class="language-plaintext highlighter-rouge">(1 + 2) * 3 = 9</code> operations that is easier written inline.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">createArticle</span><span class="p">(</span><span class="nx">article</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">connection</span> <span class="o">=</span> <span class="nf">connect</span><span class="p">()</span>

  <span class="k">return</span> <span class="k">await</span> <span class="nf">pipe</span><span class="p">(</span>
    <span class="nx">connection</span><span class="p">,</span>
    <span class="nf">useDatabase</span><span class="p">(</span><span class="nx">databaseName</span><span class="p">)</span>
    <span class="nf">useCollection</span><span class="p">(</span><span class="nx">collectionName</span><span class="p">)</span>
    <span class="nf">insertOne</span><span class="p">(</span><span class="nx">article</span><span class="p">)</span>
    <span class="nf">handleCreateResult</span><span class="p">()</span>
    <span class="nf">close</span><span class="p">(</span><span class="nx">connection</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here you can read the composition top to bottom, with care in naming you don’t have to be a programmer to understand what’s going on.</p>

<p>Once you learn and determine how you can apply composition to your code, you’ll start to see the possibility of pipes everywhere and how they can simplify even the most complex functions into simple, legible operations.</p>

<p>Some guidlines to leave you with:</p>

<ul>
  <li>Function should aim for an arrity of 1 to prevent complications</li>
  <li>Function should do 1 thing, break multiple things into multiple functions</li>
  <li>Composable functions lend themselves to unit tests</li>
</ul>

<p><strong>Some libraries that offer Composition</strong></p>

<ul>
  <li><a href="https://ramdajs.com/">Ramda</a></li>
  <li><a href="https://lodash.com/">Lodash</a></li>
</ul>]]></content><author><name></name></author><category term="post" /><category term="fp" /><category term="javascript" /><summary type="html"><![CDATA[Use function composition to construct functions greater than the sum of their parts.]]></summary></entry><entry><title type="html">Respect your guests</title><link href="https://gregdaynes.com/post/2019/09/24/respect-your-guests.html" rel="alternate" type="text/html" title="Respect your guests" /><published>2019-09-24T00:00:00+00:00</published><updated>2019-09-24T00:00:00+00:00</updated><id>https://gregdaynes.com/post/2019/09/24/respect-your-guests</id><content type="html" xml:base="https://gregdaynes.com/post/2019/09/24/respect-your-guests.html"><![CDATA[<p>We’ve come a long way with website design and development. The landscape of the frontend has change dramatically during 2010-2019. Some of it has been great, but not all of it.</p>

<p>More than likely you have seen people touting on twitter about current Javascript framework of the day and how great it is at doing χ and does away with γ problems from yesterday.
Likewise, you have probably also seen people touting going back to the old ways of HTML, CSS, and little-to-no Javascript.</p>

<p>There is a middle ground, web development has never been about extremes.
Use your tools, and favourite frameworks all you want, you don’t have to change that.
But, consider the guests on on your website (or app).</p>

<p>These are the people who you need to respect, you need to cater too, and who you want to come back.</p>

<p>You know that every guest on your site is different from the last.</p>

<ul>
  <li>Maybe this one has poor eyesight, or none at all.</li>
  <li>They could have an older computer with less than average hardware.</li>
  <li>It might be that viewing on your website using a feature-phone.</li>
</ul>

<p>In any situation, <em>prioritize your guest’s needs before your own</em>.</p>

<p>When reaching your choice framework, ask yourself</p>

<ul>
  <li>Will this impair or hinder my guests using this site?</li>
  <li>Does it support their accessibility needs?</li>
  <li>Does it respect their device, what about their bandwidth?</li>
  <li>What about their media display preference? Light or Dark to match their device. What about printed out?</li>
  <li>Does it have keyboard support?</li>
</ul>

<p>The last point “keyboard support” is hugely impacting to guests who have trouble using a mouse due to any number of reasons. The depressing part about modern frontend frameworks, is keyboard support is usually a second class citizen, or not considered at all.
When using that fancy, heavily customizable text input component from github, look to see if it does everything the native browser object does.</p>

<p>If it does, use it, love it, your guests will like it too. If it doesn’t, look around for something else that does. Or reach back into the past, figure out how it was done before without a framework. Look to to projects like <a href="https://a11yproject.com">The A11Y Project</a></p>

<p>And in the end,</p>

<p><em>Don’t sacrifice your guests experience for anything.</em></p>]]></content><author><name></name></author><category term="post" /><category term="html" /><category term="css" /><category term="javascript" /><summary type="html"><![CDATA[The web has changed over the last decade, respect your guests and build with them in mind.]]></summary></entry><entry><title type="html">Getting Started With Minitest</title><link href="https://gregdaynes.com/post/2018/09/08/getting-started-with-minitest.html" rel="alternate" type="text/html" title="Getting Started With Minitest" /><published>2018-09-08T00:00:00+00:00</published><updated>2018-09-08T00:00:00+00:00</updated><id>https://gregdaynes.com/post/2018/09/08/getting-started-with-minitest</id><content type="html" xml:base="https://gregdaynes.com/post/2018/09/08/getting-started-with-minitest.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-is-minitest" id="markdown-toc-what-is-minitest">What is Minitest?</a></li>
  <li><a href="#how-to-start-testing-with-minitest" id="markdown-toc-how-to-start-testing-with-minitest">How to start testing with Minitest</a>    <ul>
      <li><a href="#begin-by-creating-your-test-file" id="markdown-toc-begin-by-creating-your-test-file">Begin by creating your test file</a></li>
      <li><a href="#write-your-first-test" id="markdown-toc-write-your-first-test">Write your first test</a></li>
      <li><a href="#write-an-assertion" id="markdown-toc-write-an-assertion">Write an assertion</a></li>
      <li><a href="#running-your-first-test" id="markdown-toc-running-your-first-test">Running your first test</a></li>
      <li><a href="#fix-the-failing-test-case" id="markdown-toc-fix-the-failing-test-case">Fix the failing test case</a></li>
      <li><a href="#add-another-test-case" id="markdown-toc-add-another-test-case">Add another test case</a></li>
    </ul>
  </li>
  <li><a href="#how-to-write-tests-using-spec" id="markdown-toc-how-to-write-tests-using-spec">How to write tests using Spec</a>    <ul>
      <li><a href="#write-your-first-spec" id="markdown-toc-write-your-first-spec">Write your first spec</a></li>
      <li><a href="#update-test-descriptions" id="markdown-toc-update-test-descriptions">Update test descriptions</a></li>
      <li><a href="#replace-test-methods-with-it-statements" id="markdown-toc-replace-test-methods-with-it-statements">Replace test methods with it statements</a></li>
      <li><a href="#replace-variable-definitions-with-let-statements" id="markdown-toc-replace-variable-definitions-with-let-statements">Replace variable definitions with <code class="language-plaintext highlighter-rouge">let</code> statements</a></li>
      <li><a href="#replace-class-calls-with-subject" id="markdown-toc-replace-class-calls-with-subject">Replace class calls with subject.</a></li>
    </ul>
  </li>
  <li><a href="#rake-task" id="markdown-toc-rake-task">Rake Task</a></li>
  <li><a href="#finish-the-test-suite" id="markdown-toc-finish-the-test-suite">Finish the test suite</a></li>
  <li><a href="#in-deeper-with-minitest" id="markdown-toc-in-deeper-with-minitest">In Deeper with Minitest</a>    <ul>
      <li><a href="#built-in-assertions" id="markdown-toc-built-in-assertions">Built in assertions</a></li>
      <li><a href="#using-seeds-to-replay-tests" id="markdown-toc-using-seeds-to-replay-tests">Using Seeds to replay tests</a></li>
      <li><a href="#setting-up-and-tearing-down-tests" id="markdown-toc-setting-up-and-tearing-down-tests">Setting up and tearing down tests</a></li>
      <li><a href="#skipping-tests" id="markdown-toc-skipping-tests">Skipping tests</a></li>
      <li><a href="#stubbing" id="markdown-toc-stubbing">Stubbing</a></li>
    </ul>
  </li>
  <li><a href="#benchmarking-minitest" id="markdown-toc-benchmarking-minitest">Benchmarking Minitest</a></li>
  <li><a href="#minitest--rails" id="markdown-toc-minitest--rails">Minitest &amp; Rails</a></li>
  <li><a href="#references" id="markdown-toc-references">References</a></li>
</ul>

<h2 id="what-is-minitest">What is Minitest?</h2>

<p>Minitest is a complete, lightweight suite of testing utilities for Ruby.</p>

<p>It was created and is maintained by the Seattle Ruby community, and was accepted into Ruby core for 1.9.</p>

<p>Minitest provides support for TDD, BDD, Mocks/Stubs, Benchmarking, can run Capybara specs, has a spec DSL, can be easily extended however you see fit (it’s Ruby after all).</p>

<p>Here is a quick example of a test in Minitest</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="k">class</span> <span class="nc">Coffee</span>
  <span class="nb">attr_reader</span> <span class="ss">:color</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@color</span> <span class="o">=</span> <span class="ss">:black</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_color</span>
    <span class="n">fresh_coffee</span> <span class="o">=</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">assert</span> <span class="n">cup_of_coffee</span><span class="p">.</span><span class="nf">color</span> <span class="o">==</span> <span class="ss">:black</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h2 id="how-to-start-testing-with-minitest">How to start testing with Minitest</h2>

<p>Getting started with Minitest is amazingly easy. If you can write Ruby (even if you’ve only written a few methods) you can write Minitest.</p>

<h3 id="begin-by-creating-your-test-file">Begin by creating your test file</h3>

<p>To get started, create a file called <code class="language-plaintext highlighter-rouge">coffee_test.rb</code></p>

<p><em>It is recommended to follow the Minitest convention by ending the file name with _test.rb. This is not a hard requirement, but will make for a good habit when adding tests for Rails or other projects that have tooling around <code class="language-plaintext highlighter-rouge">_test</code>.</em></p>

<p>Next, add <code class="language-plaintext highlighter-rouge">minitest/autorun</code> as a requirement
Then create a new class <code class="language-plaintext highlighter-rouge">CoffeeTest</code> as a subclass of <code class="language-plaintext highlighter-rouge">Minitest::Test</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
<span class="k">end</span></code></pre></figure>

<p><em>You can add more gems, and utilities to add even more power to Minitest, but keep it simple to start.</em></p>

<p>As your test suite grows, it’s a good idea to move all the <code class="language-plaintext highlighter-rouge">require</code>s and setup into common place like <code class="language-plaintext highlighter-rouge">test_helper.rb</code>. That way you keep your tests DRY</p>

<h3 id="write-your-first-test">Write your first test</h3>

<p>Now that the boilerplate ready, add the first test method.</p>

<p><em>getting-started-with-minitest tests are just plain old Ruby methods.</em></p>

<p>Start by adding a new method starting with <code class="language-plaintext highlighter-rouge">test_</code> to the class.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_coffee</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">test_</code> prefix for the method is how Minitest distinguishes Ruby test methods and other methods in the test file, (like helper methods that handle setup, or create data for use across multiple tests).</p>

<p>_<code class="language-plaintext highlighter-rouge">test_</code> is one way to write tests in Minitest. Another way is to use a Spec DSL, which is explained later in this post._</p>

<h3 id="write-an-assertion">Write an assertion</h3>

<p>An assertion will check to see if the returned value of a block or call evaluates to <code class="language-plaintext highlighter-rouge">true</code>. If so, the test will pass. If not false, the test fails.</p>

<p>To test the opposite, blocks or calls returning false, use <code class="language-plaintext highlighter-rouge">refute</code>. The default Minitest <code class="language-plaintext highlighter-rouge">assert</code> methods have opposite <code class="language-plaintext highlighter-rouge">refute</code> methods that take the same params.</p>

<p>Now write an assertion, in this case, we’re going to test that a new instance of <code class="language-plaintext highlighter-rouge">Coffee</code> is still a <code class="language-plaintext highlighter-rouge">Coffee</code>.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_coffee</span>
    <span class="n">assert_instance_of</span> <span class="no">Coffee</span><span class="p">,</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>This is done using the assertion <code class="language-plaintext highlighter-rouge">assert_instance_of</code>, which takes a <code class="language-plaintext highlighter-rouge">class</code>, and an <code class="language-plaintext highlighter-rouge">obj</code>, checking whether or not the <code class="language-plaintext highlighter-rouge">obj</code> is an instance of <code class="language-plaintext highlighter-rouge">class</code>.</p>

<h3 id="running-your-first-test">Running your first test</h3>

<p>Running a test file is the same as any Ruby script.</p>

<p>Start up a Terminal in the same location as your test file, and run the following command.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ruby coffee_test.rb</code></pre></figure>

<p>The output should be similar to the following.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Run options: <span class="nt">--seed</span> 35012

<span class="c"># Running:</span>

E

Finished <span class="k">in </span>0.000729s, 1371.7422 runs/s, 0.0000 assertions/s.

1<span class="o">)</span> Error:
CoffeeTest#test_coffee:
NameError: uninitialized constant CoffeeTest::Coffee
Did you mean?  CoffeeTest
    test_001b.rb:5:in <span class="sb">`</span>test_coffee<span class="s1">'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips</span></code></pre></figure>

<p>Great! Sort of, the test ran successfully, but the it failed.</p>

<h3 id="fix-the-failing-test-case">Fix the failing test case</h3>

<p>Looking over the output from the test run, notice the following:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Run options: --seed 35012</code> This is the seed test was run with. It is randomized each time the test is run. More on seeds below.</li>
  <li>A series of <code class="language-plaintext highlighter-rouge">...</code>s and <code class="language-plaintext highlighter-rouge">F</code>s. These signify successes and exceptions. For now it is just a single <code class="language-plaintext highlighter-rouge">E</code></li>
  <li>How long the testing took, how many times it will run in per second, and how many assertions we can run per second. This is useful later in determining how fast your suite is. Fast tests = faster development</li>
  <li>List of errors, where they occurred and possible fix</li>
  <li>General stats about the run of tests just performed</li>
</ul>

<p>The test ran quickly, but failed. Look over the error. It indicates that <code class="language-plaintext highlighter-rouge">Coffee</code> is not defined anywhere. That’s an easy fix.</p>

<p>Add the <code class="language-plaintext highlighter-rouge">Coffee</code> class.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee.rb</span>

<span class="k">class</span> <span class="nc">Coffee</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>


<span class="c1"># coffee.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require_relative</span> <span class="s1">'coffee'</span>

<span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_coffee</span>
    <span class="n">assert_instance_of</span> <span class="no">Coffee</span><span class="p">,</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>And now, run the test again. Same command as before</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ruby coffee_test.rb


Run options: <span class="nt">--seed</span> 5584

<span class="c"># Running:</span>

<span class="nb">.</span>

Finished <span class="k">in </span>0.000671s, 1490.3130 runs/s, 1490.3130 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips</code></pre></figure>

<p>The test now passes.</p>

<p>That’s all there is to testing using Minitest.</p>

<h3 id="add-another-test-case">Add another test case</h3>

<p>Add a test that will check an instance of Coffee, will return a list of flavours.</p>

<p>The assertion to use here will be <code class="language-plaintext highlighter-rouge">assert_includes</code>. Which takes a <code class="language-plaintext highlighter-rouge">collection</code> and an <code class="language-plaintext highlighter-rouge">obj</code>, validating that the obj is in the collection.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee.rb</span>

<span class="k">class</span> <span class="nc">Coffee</span>
  <span class="nb">attr_reader</span> <span class="ss">:flavours</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@flavours</span> <span class="o">=</span> <span class="sx">%w[Chocolate Honey Toffee]</span>
  <span class="k">end</span>
<span class="k">end</span>


<span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require_relative</span> <span class="s1">'coffee'</span>

<span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_coffee</span>
    <span class="n">assert_instance_of</span> <span class="no">Coffee</span><span class="p">,</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_coffee_flavour</span>
    <span class="n">possible_flavour</span> <span class="o">=</span> <span class="s1">'honey'</span>
    <span class="n">tasted_flavours</span> <span class="o">=</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">flavours</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:downcase</span><span class="p">)</span>
    <span class="n">assert_includes</span> <span class="n">tasted_flavours</span><span class="p">,</span> <span class="n">possible_flavour</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h2 id="how-to-write-tests-using-spec">How to write tests using Spec</h2>

<p>Minitest comes with a Spec DSL. Which, instead of writing methods, they’re written plain english. If you’re familiar with RSpec, you’ll feel at home with Minitest/Spec.</p>

<h3 id="write-your-first-spec">Write your first spec</h3>

<p>Continuing with our previous coffee example, we’ll do the following:</p>

<ul>
  <li>Update each test <code class="language-plaintext highlighter-rouge">test_description</code> to use <code class="language-plaintext highlighter-rouge">describe</code></li>
  <li>update each test to use <code class="language-plaintext highlighter-rouge">it</code>statements</li>
  <li>Make use of <code class="language-plaintext highlighter-rouge">let</code> statements</li>
</ul>

<h3 id="update-test-descriptions">Update test descriptions</h3>

<p>We’ll start by moving our class <code class="language-plaintext highlighter-rouge">Coffee</code> above the tests.</p>

<p><em>Make sure your test follows the class you’re resting. This wasn’t a requirement before because we were creating a new class. In this case, we’re referencing an existing class.</em></p>

<p>Next, we’ll replace our class <code class="language-plaintext highlighter-rouge">CoffeeTest</code> with a describe block.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee.rb</span>

<span class="k">class</span> <span class="nc">Coffee</span>
  <span class="o">...</span>
<span class="k">end</span>


<span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="o">...</span>
<span class="k">end</span></code></pre></figure>

<p>The big change here is</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span></code></pre></figure>

<p>becomes</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span></code></pre></figure>

<p>Everything else stays the same.</p>

<p><em>You can nest describe blocks which can help with organizing larger test files into logical pieces.</em></p>

<p>We’re now ready to continue upgrading our tests to specs.</p>

<h3 id="replace-test-methods-with-it-statements">Replace test methods with it statements</h3>

<p>Next, we’ll replace <code class="language-plaintext highlighter-rouge">test_</code> methods with <code class="language-plaintext highlighter-rouge">it</code> statements. This will make our tests read more like plain language, and less like a Ruby method.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee.rb</span>

<span class="k">class</span> <span class="nc">Coffee</span>
  <span class="o">...</span>
<span class="k">end</span>


<span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s1">'gives us a new Coffee'</span> <span class="k">do</span>
    <span class="o">...</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s1">'has a honey flavour'</span> <span class="k">do</span>
    <span class="o">...</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">it</code> statements define an expectation with a plain english name. If no name is passed in, it will default to anonymous. For readability, it’s recommended to add a name to all <code class="language-plaintext highlighter-rouge">it</code> statements.</p>

<p><em>Under the hood, an <code class="language-plaintext highlighter-rouge">it</code> statement gets converted into a <code class="language-plaintext highlighter-rouge">test_the_thing</code> method like we had previously.</em></p>

<h3 id="replace-variable-definitions-with-let-statements">Replace variable definitions with <code class="language-plaintext highlighter-rouge">let</code> statements</h3>

<p><code class="language-plaintext highlighter-rouge">let</code> allows you to write a concise accessor that memoizes its contents after the first call to it.</p>

<p><em>For our existing tests, we don’t have anything that needs it. We’re going to make our possible flavours more complicated than just a string so we can try using <code class="language-plaintext highlighter-rouge">let</code></em></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee.rb</span>

<span class="k">class</span> <span class="nc">Coffee</span>
  <span class="nb">attr_reader</span> <span class="ss">:flavours</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@flavours</span> <span class="o">=</span> <span class="sx">%w[Chocolate Honey Toffee]</span>
  <span class="k">end</span>
<span class="k">end</span>


<span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require_relative</span> <span class="s1">'coffee'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s1">'gives us a new Coffee'</span> <span class="k">do</span>
    <span class="n">assert_instance_of</span> <span class="no">Coffee</span><span class="p">,</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:possible_flavour</span><span class="p">)</span> <span class="p">{</span> <span class="sx">%w[chocolate honey toffee]</span><span class="p">.</span><span class="nf">sample</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">'has a honey flavour'</span> <span class="k">do</span>
    <span class="n">tasted_flavours</span> <span class="o">=</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">flavours</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:downcase</span><span class="p">)</span>
    <span class="n">assert_includes</span> <span class="n">tasted_flavours</span><span class="p">,</span> <span class="n">possible_flavour</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>You’ll notice that we defined the <code class="language-plaintext highlighter-rouge">let</code> statement outside of the <code class="language-plaintext highlighter-rouge">it</code> block. This is for reuse in other tests. And because it’s memoized, every other test that calls it will use the same value that was returned the first time it was called.</p>

<p>Another common pattern is to put shared <code class="language-plaintext highlighter-rouge">let</code> statements at the top or at least above a series of tests that depend on them.</p>

<p><strong>You can only access a <code class="language-plaintext highlighter-rouge">let</code> value from inside an <code class="language-plaintext highlighter-rouge">it</code> statement. If you try to access it from outside a <code class="language-plaintext highlighter-rouge">it</code> statement, the test suite will fail.</strong></p>

<h3 id="replace-class-calls-with-subject">Replace class calls with subject.</h3>

<p>Subject is a lazy man’s generator. It will return the block you specify as <code class="language-plaintext highlighter-rouge">subject</code>.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># coffee.rb</span>

<span class="k">class</span> <span class="nc">Coffee</span>
  <span class="nb">attr_reader</span> <span class="ss">:flavours</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@flavours</span> <span class="o">=</span> <span class="sx">%w[Chocolate Honey Toffee]</span>
  <span class="k">end</span>
<span class="k">end</span>


<span class="c1"># coffee_test.rb</span>

<span class="nb">require</span> <span class="s1">'minitest/autorun'</span>
<span class="nb">require_relative</span> <span class="s1">'coffee'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:possible_flavour</span><span class="p">)</span> <span class="p">{</span> <span class="sx">%w[chocolate honey toffee]</span><span class="p">.</span><span class="nf">sample</span> <span class="p">}</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">'gives us a new Coffee'</span> <span class="k">do</span>
    <span class="n">assert_instance_of</span> <span class="no">Coffee</span><span class="p">,</span> <span class="n">subject</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s1">'has a honey flavour'</span> <span class="k">do</span>
    <span class="n">assert_includes</span> <span class="n">subject</span><span class="p">.</span><span class="nf">flavours</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:downcase</span><span class="p">),</span> <span class="n">possible_flavour</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>You’ll notice that we’ve placed <code class="language-plaintext highlighter-rouge">subject</code> above both of our test cases, it’s also not overly complex. But allows us to not write <code class="language-plaintext highlighter-rouge">Coffee.new</code> all over the place.</p>

<h2 id="rake-task">Rake Task</h2>

<p><em>Don’t know what rake is?</em>
Rake is a task runner for Ruby. This post won’t show you how to use or write Rake Tasks, but how what a simple task looks like for testing. If you want to learn more about Rake, I recommend <a href="http://www.stuartellis.name/articles/rake/">Stuart Ellis’s - Using Rake to Automate Tasks</a>.</p>

<p>Add Rake to your <code class="language-plaintext highlighter-rouge">Gemfile</code></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">gem <span class="nb">install </span>rake</code></pre></figure>

<p>Add the following to <code class="language-plaintext highlighter-rouge">rakefile.rb</code>.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># rakefile.rb</span>

<span class="nb">require</span> <span class="s1">'rake/testtask'</span>

<span class="n">desc</span> <span class="s1">'Run test suite'</span>
<span class="no">Rake</span><span class="o">::</span><span class="no">TestTask</span><span class="p">.</span><span class="nf">new</span><span class="p">()</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
  <span class="n">t</span><span class="p">.</span><span class="nf">pattern</span> <span class="o">=</span> <span class="s1">'./**/*_test.rb'</span>
<span class="k">end</span></code></pre></figure>

<p>This will find all files ending with <code class="language-plaintext highlighter-rouge">_test.rb</code>, and then call each using <code class="language-plaintext highlighter-rouge">Rake::TestTask</code>.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">rake <span class="nb">test</span></code></pre></figure>

<p>Which will output results that looks exactly it you called the test directly. The difference is, the rake task groups all the tests to gether.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Run options: <span class="nt">--seed</span> 52969

<span class="c"># Running:</span>

..

Finished <span class="k">in </span>0.000582s, 3435.1925 runs/s, 5152.7888 assertions/s.

2 runs, 3 assertions, 0 failures, 0 errors, 0 skips</code></pre></figure>

<h2 id="finish-the-test-suite">Finish the test suite</h2>

<p>You should now have enough information to start implenting coverage on any of your Ruby programs.</p>

<h2 id="in-deeper-with-minitest">In Deeper with Minitest</h2>

<p>Now we’ll take a look into more of the features available in Minitest.</p>

<h3 id="built-in-assertions">Built in assertions</h3>

<p>Minitest comes with a ton of assertions built in, which will cover almost every test case you can think of. We’ll go over a few of the more common assertions below.</p>

<p>Minitest assertions always check for a postive result. If you want to test for negative / false results, each assertion has a negative-twin <code class="language-plaintext highlighter-rouge">refute</code>. Which take the same params as their positive sibling, but make sure the result is the opposite.</p>

<p><code class="language-plaintext highlighter-rouge">assert(predicate, msg = nil)</code> fails unless <code class="language-plaintext highlighter-rouge">predicate</code> returns true</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">assert</span><span class="p">(</span><span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">rating</span> <span class="o">==</span> <span class="s1">'Amazing!'</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">assert_empty(obj, msg = nil)</code> fails unless <code class="language-plaintext highlighter-rouge">obj</code> is empty</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">assert_empty</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">extras</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">assert_includes(collection, obj, msg = nil)</code> fails unless <code class="language-plaintext highlighter-rouge">collection</code> includes <code class="language-plaintext highlighter-rouge">obj</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="n">subject</span> <span class="p">{</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">flavours</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">assert_includes</span> <span class="n">subject</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:downcase</span><span class="p">),</span> <span class="vg">$possible_flavour</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">assert_match(matcher, obj, message = nil)</code> fails unless <code class="language-plaintext highlighter-rouge">matcher</code> =~ <code class="language-plaintext highlighter-rouge">obj</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="no">Coffee</span> <span class="k">do</span>
  <span class="n">matcher</span> <span class="o">=</span> <span class="sr">/[a-zA-Z].+\!/</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">assert_match</span> <span class="n">matcher</span><span class="p">,</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">rating</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">assert_nil(obj, msg = nil)</code> fails unless <code class="language-plaintext highlighter-rouge">obj</code> is <code class="language-plaintext highlighter-rouge">nil</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="no">Cup</span> <span class="k">do</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">assert_nil</span> <span class="no">Cup</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">filling</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">assert_raise(*exp)</code> fails unless the block raises an exception</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="s1">'Cup'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:coffee</span><span class="p">)</span> <span class="p">{</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:cup</span><span class="p">)</span> <span class="p">{</span> <span class="no">Cup</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">'raises when we add another cup'</span> <span class="k">do</span>
    <span class="n">assert_raises</span> <span class="no">RuntimeError</span> <span class="k">do</span>
      <span class="n">cup</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Cup</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Minitest comes with a wide range of assertions for testing. You can see all of the available assertions and refutions in the <a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/minitest/rdoc/MiniTest/Assertions.html">Ruby Docs - Assertions</a></p>

<h3 id="using-seeds-to-replay-tests">Using Seeds to replay tests</h3>

<p>If you’ve watched the output as you’ve run throug Minispec, you’ll probably have noticed the following</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Run options: <span class="nt">--seed</span> 59802</code></pre></figure>

<p>A seed is a representation of the order of tests, as well as the randomized data inside your tests. Keeping track of seeds allows you, or someone else to rerun the test exactly as a previous time. This helps for debugging failures.</p>

<p>To specify seeds you need to pass in the value when running your test suite.</p>

<p>If you run tests using the Ruby CLI</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">ruby <span class="nb">test</span> <span class="nt">-s</span> 59802</code></pre></figure>

<p>If you run tests using a Rake Task</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">rake <span class="nb">test </span><span class="nv">SEED</span><span class="o">=</span>59802</code></pre></figure>

<h3 id="setting-up-and-tearing-down-tests">Setting up and tearing down tests</h3>

<p>As you start building out tests for your code. You’ll notice patterns of setup, start happening around your tests.</p>

<p>Minitest has you covered for wrapping each test with setup code, using <code class="language-plaintext highlighter-rouge">setup</code> and <code class="language-plaintext highlighter-rouge">teardown</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">CoffeeTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">setup</span>
    <span class="vi">@cup</span> <span class="o">=</span> <span class="no">Cup</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@cup</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">teardown</span>
    <span class="vi">@cup</span><span class="p">.</span><span class="nf">drink</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_cup_is_not_empty</span>
    <span class="n">refute</span> <span class="vi">@cup</span><span class="p">.</span><span class="nf">empty?</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>If you’re using specs, you can also use <code class="language-plaintext highlighter-rouge">before</code> and <code class="language-plaintext highlighter-rouge">after</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="s1">'Coffee'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:cup</span><span class="p">)</span> <span class="p">{</span> <span class="no">Cup</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="n">cup</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">after</span> <span class="p">{</span> <span class="n">cup</span><span class="p">.</span><span class="nf">drink</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">'checks the cup has coffee in it'</span> <span class="k">do</span>
    <span class="n">refute</span> <span class="n">cup</span><span class="p">.</span><span class="nf">empty?</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p><em><code class="language-plaintext highlighter-rouge">setup</code>, <code class="language-plaintext highlighter-rouge">teardown</code>, <code class="language-plaintext highlighter-rouge">before</code>, and <code class="language-plaintext highlighter-rouge">after</code> will be run around <strong>each</strong> test. This can add significant delays to your tests if you’re putting complex setup logic in the setup code. You can add the gem <code class="language-plaintext highlighter-rouge">minitest-hooks</code> to get access to <code class="language-plaintext highlighter-rouge">before_all</code>, <code class="language-plaintext highlighter-rouge">after_all</code> which runs around all tests in the test file. This is more commonly used when testing many parts of an instance that has a decent amount of setup</em></p>

<h3 id="skipping-tests">Skipping tests</h3>

<p>There comes a time when you are testing your code, and you realize you need to test something else as well. You can remember what you want to write, you can leave yourself a comment, or you can write a <code class="language-plaintext highlighter-rouge">skip</code> statement.</p>

<p>Using <code class="language-plaintext highlighter-rouge">skip</code> is the same as using any of the <code class="language-plaintext highlighter-rouge">assert</code>, <code class="language-plaintext highlighter-rouge">refute</code> methods.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="s1">'Coffee'</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s1">'checks the coffee rating'</span> <span class="k">do</span>
    <span class="n">assert</span><span class="p">(</span><span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">rating</span> <span class="o">==</span> <span class="s1">'Amazing!'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s1">'makes sure the taste is not bitter'</span> <span class="k">do</span>
    <span class="n">skip</span> <span class="s1">'coffee.taste should not be bitter'</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Skip statements have an advantage over leaving a comment. That is the test reporter will show a list of all the skipped tests, so if you forget one, there is a small indicator to let you know you still have some work to do.</p>

<p><em>But beware if you use setup/teardown, or before/after to do complex setups, these will still be run around the skipped test. This can increase your test time.</em></p>

<h3 id="stubbing">Stubbing</h3>

<p>Like other testing libraries, <code class="language-plaintext highlighter-rouge">stub</code>s temporarily replace a method and return the specified result. The original method is then swapped back in when the stub block is finished.</p>

<p>Stubs are great for temporarily replacing methods that may take too long to run in your test suite, or are incapable of running in the environment. <strong>This does not mean that method should never be tested</strong>. Just that the method might be better tested elsewhere.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Cup</span>
  <span class="o">...</span>
  <span class="k">def</span> <span class="nf">slow_drink</span>
    <span class="nb">sleep</span> <span class="mi">10</span>
    <span class="nb">puts</span> <span class="s1">'*slurp*'</span>
    <span class="nb">sleep</span> <span class="mi">10</span>
    <span class="nb">puts</span> <span class="s1">'*slurp*'</span>
    <span class="nb">sleep</span> <span class="mi">10</span>
    <span class="vi">@filling</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="k">end</span>
  <span class="o">...</span>
<span class="k">end</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require_relative</span> <span class="s1">'test_helper'</span>

<span class="n">describe</span> <span class="s1">'Cup'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:coffee</span><span class="p">)</span> <span class="p">{</span> <span class="no">Coffee</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:cup</span><span class="p">)</span> <span class="p">{</span> <span class="no">Cup</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">before</span> <span class="p">{</span> <span class="n">cup</span><span class="p">.</span><span class="nf">add</span> <span class="n">coffee</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">'drinks a coffee slowly'</span> <span class="k">do</span>
    <span class="n">cup</span><span class="p">.</span><span class="nf">stub</span> <span class="ss">:slow_drink</span><span class="p">,</span> <span class="n">cup</span><span class="p">.</span><span class="nf">filling</span> <span class="o">=</span> <span class="kp">nil</span> <span class="k">do</span>
      <span class="n">cup</span><span class="p">.</span><span class="nf">slow_drink</span>
      <span class="n">assert_nil</span> <span class="n">cup</span><span class="p">.</span><span class="nf">filling</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Unlike a <code class="language-plaintext highlighter-rouge">Mock</code> the method needs to exist prior to stubbing. You can’t use a stub on a method that does not exist.</p>

<p><em>If you must test a method that doesn’t exist, you can use a singleton method to create a new non-existant method</em></p>

<h2 id="benchmarking-minitest">Benchmarking Minitest</h2>

<p>Minitest comes with benchmarking baked in. This is handy for testing out performance for the code you write.</p>

<p>There are 2 posts from Chris Kottom that describe Benchmarking with Minitest from a high level, as well as practical examples. I recommend reading them a few times.</p>

<p><a href="https://chriskottom.com/blog/2015/04/minitest-benchmark-an-introduction">Minitest::Benchmark: An Introduction</a></p>

<p><a href="https://chriskottom.com/blog/2015/05/minitest-benchmark-a-practical-example">Minitest::Benchmark: A Practical Example</a></p>

<h2 id="minitest--rails">Minitest &amp; Rails</h2>

<p>Rails by default uses Minitest to run your tests. In fact, Rails itself is tested using minitest.</p>

<p>The default Rails <code class="language-plaintext highlighter-rouge">test_helper.rb</code> is configured to run <code class="language-plaintext highlighter-rouge">test</code> style tests, it looks like the following.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># test_helper.rb</span>

<span class="no">ENV</span><span class="p">[</span><span class="s2">"RAILS_ENV"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"test"</span>
<span class="nb">require</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'../../config/environment'</span><span class="p">,</span> <span class="kp">__FILE__</span><span class="p">)</span>
<span class="nb">require</span> <span class="s1">'rails/test_help'</span>

<span class="k">class</span> <span class="nc">ActiveSupport::TestCase</span>
  <span class="c1"># Setup all fixtures in test/fixtures/*.(yml|csv) for all tests in alphabetical order.</span>
  <span class="c1">#</span>
  <span class="c1"># Note: You'll currently still have to declare fixtures explicitly in integration tests</span>
  <span class="c1"># -- they do not yet inherit this setting</span>
  <span class="n">fixtures</span> <span class="ss">:all</span>

  <span class="c1"># Add more helper methods to be used by all tests here...</span>
<span class="k">end</span></code></pre></figure>

<p>We can add support for Minitest::Spec DSL pretty easily.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># test_helper.rb</span>

<span class="no">ENV</span><span class="p">[</span><span class="s2">"RAILS_ENV"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"test"</span>
<span class="nb">require</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'../../config/environment'</span><span class="p">,</span> <span class="kp">__FILE__</span><span class="p">)</span>
<span class="nb">require</span> <span class="s1">'rails/test_help'</span>
<span class="nb">require</span> <span class="s1">'minitest/autorub'</span>

<span class="k">class</span> <span class="nc">ActiveSupport::TestCase</span>
  <span class="c1"># Setup all fixtures in test/fixtures/*.(yml|csv) for all tests in alphabetical order.</span>
  <span class="c1">#</span>
  <span class="c1"># Note: You'll currently still have to declare fixtures explicitly in integration tests</span>
  <span class="c1"># -- they do not yet inherit this setting</span>
  <span class="n">fixtures</span> <span class="ss">:all</span>

  <span class="c1"># Add more helper methods to be used by all tests here...</span>
  <span class="kp">extend</span> <span class="no">MiniTest</span><span class="o">::</span><span class="no">Spec</span><span class="o">::</span><span class="no">DSL</span>

  <span class="n">register_spec_type</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">desc</span><span class="o">|</span>
    <span class="n">desc</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span> <span class="k">if</span> <span class="n">desc</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>With spec support inside <code class="language-plaintext highlighter-rouge">test_helper.rb</code> you can now write test, specs, and any combination of features to test your Rails code. <em>MAGIC</em></p>

<h2 id="references">References</h2>

<p>This post only covers a small portion of what Minitest can do. That is not including what the numerous extensions bring to the table.</p>

<p>The following links should help you on your way to mastering Minitest.</p>

<ul>
  <li><a href="https://github.com/seattlerb/minitest">SeattleRB - Minitest</a></li>
  <li><a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/minitest/rdoc/MiniTest.html">Ruby Docs - Minitest</a></li>
</ul>]]></content><author><name></name></author><category term="post" /><category term="ruby" /><category term="testing" /><category term="minitest" /><category term="rspec" /><summary type="html"><![CDATA[Minitest is a comprehensive testing library that ships with Ruby. Take a deep look into what Minitest is, how to use it, some of it's features and how it compares to RSpec.]]></summary></entry></feed>