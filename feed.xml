<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gregdaynes.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gregdaynes.com/" rel="alternate" type="text/html" /><updated>2024-01-03T07:04:16+00:00</updated><id>https://gregdaynes.com/feed.xml</id><title type="html">Greg Daynes</title><subtitle>The website and home of Gregory Daynes. Find links to projects, notebooks, and resume.</subtitle><entry><title type="html">Fellow Stagg Repair</title><link href="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html" rel="alternate" type="text/html" title="Fellow Stagg Repair" /><published>2023-12-28T00:00:00+00:00</published><updated>2023-12-28T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/28/fellow-stagg-repair.html"><![CDATA[<h3 id="problem">Problem</h3>

<p>The control knob on the base was not registering presses (which turn the kettle on and off). The kettle itself was working fine, and the temperature control was working.</p>

<h3 id="solution">Solution</h3>

<p>The base is held together with 4 screws, and 8 clips. The clips are easy to release with a flathead screwdriver. The screws are hidden under the sticker on the bottom - <em>Not the rubber pads</em>.</p>

<p><em>In my looking for the screws, I removed the feet, which caused the rubber to tear. They’re easy enough to glue back on.</em></p>

<p>The rotary encoder is situated on a daughter board fixed with 2 philips screws and connected with a ribbon cable to the main board. The cable disconnects from a JST port on the mainboard, but is soldered on the daughter board.</p>

<p>Rotary Encoder Details:</p>

<ul>
  <li>5V</li>
  <li>20 pulses</li>
  <li>13mm x 14mm</li>
</ul>

<p>I used <a href="https://www.amazon.ca/dp/B07T3672VK">these encoders</a> from Amazon.</p>

<p>Desoldering the rotary encoder was straight forward, I used a solder-sucker and wick to remove and prepare the pads. I did have to have fairly high temperature on my iron around 740 to get the factory solder to warm up.</p>

<p>Re-assembly is disassembly in reverse, be mindful of the thin wires routing around the center. Use a bit of Kapton tape to keep things in place.</p>

<h3 id="notes">Notes</h3>

<p>The screws use a triangle security bit, which I didn’t have on hand, however a T-6 Torx bit worked well.</p>

<p>The LCD is fixed to the main control board, which proves to be very fragile. I managed to crack the LCD even while attempting to be gentle. Beware.</p>

<p>I did not measure the stem prior to this repair, the donor rotary encoder stem was much longer. Beware of this and make sure to measure and find the appropriate stem. A long one of course workse, but the knob stands above the case now, and is easier for water to find ingress into the electronics.</p>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[Outlining repair of the base for the Stag EKG Kettle by Fellow.]]></summary></entry><entry><title type="html">Hyde Decap</title><link href="https://gregdaynes.com/project/2023/12/22/hyde-decap.html" rel="alternate" type="text/html" title="Hyde Decap" /><published>2023-12-22T00:00:00+00:00</published><updated>2023-12-22T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/22/hyde-decap</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/22/hyde-decap.html"><![CDATA[<p>A plugin for Jekyll that removes some of the setup and configuration when adding Decap CMS to a Jekyll site.</p>

<p><em>The repository has instructions to get up and running.</em></p>

<ul>
  <li><a href="https://decapcms.org">Decap CMS</a></li>
  <li><a href="https://github.com/gregdaynes/hyde-decap">Hyde Decap Repo</a></li>
  <li><a href="https://rubygems.org/gems/hyde-decap">Ruby Gems</a></li>
</ul>

<h3 id="features">Features</h3>

<ul>
  <li>
    <p>Automatic creation of the /admin (or custom page), which includes the Javascript and mountpoint for Decap to load.</p>
  </li>
  <li>
    <p>It adds (Responsive Decap](https://github.com/hithismani/responsive-decap/) to provide a better mobile experience to Decap.</p>
  </li>
  <li>
    <p>Configuration for Decap CMS is through YML which Hyde Decap gets from Jekyll’s <code class="language-plaintext highlighter-rouge">_config.yml</code> instead of a standalone config.</p>
  </li>
  <li>
    <p>Provides a command for Jekyll CLI <code class="language-plaintext highlighter-rouge">jekyll decap</code> which acts like <code class="language-plaintext highlighter-rouge">jekyll serve</code>, but launches two processes, one for building and serving Jekyll and the other running a local backend for Decap CMS to connect to.</p>

    <ol>
      <li>
        <p>Serve - This is the same command as calling <code class="language-plaintext highlighter-rouge">jekyll serve</code> and any options passed to <code class="language-plaintext highlighter-rouge">jekyll decap</code> will be forwarded to <code class="language-plaintext highlighter-rouge">serve</code></p>
      </li>
      <li>
        <p><a href="https://www.npmjs.com/package/netlify-cms-proxy-server">Netlify CMS Proxy Server</a> - Facilitates local development by stubbing OAuth login and git management.</p>
      </li>
    </ol>
  </li>
</ul>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A plugin for Jekyll that removes some of the setup and configuration when adding Decap CMS to a Jekyll site.]]></summary></entry><entry><title type="html">Fixing Hombrew permissions when using ASDF</title><link href="https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions.html" rel="alternate" type="text/html" title="Fixing Hombrew permissions when using ASDF" /><published>2023-12-08T00:00:00+00:00</published><updated>2023-12-08T00:00:00+00:00</updated><id>https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions</id><content type="html" xml:base="https://gregdaynes.com/note/2023/12/08/fixing-homebrew-permissions.html"><![CDATA[<p>Ruby Gem management with ASDF-VM sometimes encounters issues with permissions when using bundler to manage gems. I haven’t gotten to the root-cause, but this snippet helps in fixing the permissions.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nt">-R</span> <span class="si">$(</span><span class="nb">whoami</span><span class="si">)</span> <span class="si">$(</span>brew <span class="nt">--prefix</span><span class="si">)</span>/<span class="k">*</span>
</code></pre></div></div>

<p>Original post on <a href="https://stackoverflow.com/questions/16432071/how-to-fix-homebrew-permissions">Stackoverflow</a></p>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Ruby Gem management with ASDF-VM sometimes encounters issues with permissions when using bundler to manage gems.]]></summary></entry><entry><title type="html">Hyde Page CSS &amp;amp; JS</title><link href="https://gregdaynes.com/project/2023/12/04/hyde-page-css-js.html" rel="alternate" type="text/html" title="Hyde Page CSS &amp;amp; JS" /><published>2023-12-04T00:00:00+00:00</published><updated>2023-12-04T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/04/hyde-page-css-js</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/04/hyde-page-css-js.html"><![CDATA[<p>Hyde Page CSS / JS are plugins that provide the ability to declare CSS and JS in the frontmatter of a page or layout.</p>

<p><em>The repository has instructions to get up and running.</em></p>

<ul>
  <li><a href="https://github.com/gregdaynes/hyde-page-css">Hyde Page CSS Repo</a></li>
  <li>
    <p><a href="https://rubygems.org/gems/hyde-page-css">Ruby Gems</a></p>
  </li>
  <li><a href="https://github.com/gregdaynes/hyde-page-js">Hyde Page JS Repo</a></li>
  <li><a href="https://rubygems.org/gems/hyde-page-js">Ruby Gems</a></li>
</ul>

<h3 id="preamble">Preamble</h3>

<p>These gems eschew the firmly established pattern of bundle your CSS and JS files together and serving them as single payloads.</p>

<p>This may be a bad idea in the long run, but so far, it’s been successful for the sites I’ve used them and their predecessors on.</p>

<h3 id="features">Features</h3>

<ul>
  <li>
    <p>Frontmatter option <code class="language-plaintext highlighter-rouge">css</code> or <code class="language-plaintext highlighter-rouge">js</code> which takes an array of file names in the <code class="language-plaintext highlighter-rouge">/assets/css</code> or <code class="language-plaintext highlighter-rouge">/assets/js</code> folder. Thes files are concatenated, minified and fingerprinted.</p>
  </li>
  <li>
    <p>Adds absolute urls to <code class="language-plaintext highlighter-rouge">page.css_files</code> or <code class="language-plaintext highlighter-rouge">page.js_files</code> for adding link tags to the page through liquid.</p>
  </li>
  <li>
    <p>Heirarchy of Layouts - with Jekyll, a page may have 0 or more layouts, in a heriarchical fasion, for example: <code class="language-plaintext highlighter-rouge">base.html &gt; blog.hmtl &gt; post.html &gt; page</code>
Each layout and page can have as many CSS/JS files as wanted, but will be concatenated to a single file per layout/page in the heirarchy.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A pair of plugins that provide frontmatter options to include CSS and JS files on specific pages and layouts.]]></summary></entry><entry><title type="html">Hyde Fonts</title><link href="https://gregdaynes.com/project/2023/12/03/hyde-fonts.html" rel="alternate" type="text/html" title="Hyde Fonts" /><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/12/03/hyde-fonts</id><content type="html" xml:base="https://gregdaynes.com/project/2023/12/03/hyde-fonts.html"><![CDATA[A plugin for Jekyll that automates adding Google Fonts to your site.

_The repository has instructions to get up and running._

- [Hyde Fonts Repo](https://github.com/gregdaynes/hyde-fonts)
- [Ruby Gems](https://rubygems.org/gems/hyde-fonts)

### Features

- Utilizes a configuration file to specify fonts and variants to include in your site.

- Creates CSS declrations for each font.
   - This can be included as a file or inline with other CSS on your site.

   - Exposes a liquid tag `{% hyde_fonts link %}` to include  the fonts in your site using a link tag. Or `{% hyde_fonts inline %}` to include the CSS for inclusion in other CSS files or `<style>` tags.]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[A plugin for Jekyll that automates adding Google Fonts to your site.]]></summary></entry><entry><title type="html">Turing Pi</title><link href="https://gregdaynes.com/project/2023/11/11/turing-pi.html" rel="alternate" type="text/html" title="Turing Pi" /><published>2023-11-11T00:00:00+00:00</published><updated>2023-11-11T00:00:00+00:00</updated><id>https://gregdaynes.com/project/2023/11/11/turing-pi</id><content type="html" xml:base="https://gregdaynes.com/project/2023/11/11/turing-pi.html"><![CDATA[<h3 id="turing-pi">Turing Pi</h3>

<p><a href="https://turingpi.com/product/turing-pi-2/">Turing Pi 2</a>
<a href="https://docs.turingpi.com/docs">docs</a></p>

<h3 id="mini-atx-case">Mini ATX Case</h3>

<p><a href="https://www.amazon.ca/ZZEW-Mini-ITX-Computer-Aluminum-Reverse/dp/B0BX2KQV8M">ZZEW Mini ITX</a></p>

<h3 id="rotate-touch-interface-to-match-90deg-screen-rotation">Rotate touch interface to match 90deg screen rotation</h3>

<p>https://forums.raspberrypi.com/viewtopic.php?t=324035</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dtoverlay=vc4-kms-v3d
dtoverlay=vc4-kms-dsi-7inch,swapxy,invx
max_framebuffers=2
ignore_lcd=1
</code></pre></div></div>

<h3 id="external-power-switch">External Power Switch</h3>

<p><a href="https://howchoo.com/pi/how-to-add-a-power-button-to-your-raspberry-pi/">Rpi 4 Power Switch</a></p>]]></content><author><name></name></author><category term="project" /><summary type="html"><![CDATA[The Turing Pi is a clustering mainboard for various single board computers providing up to 4 modules.]]></summary></entry><entry><title type="html">Example NodeJS Application</title><link href="https://gregdaynes.com/post/2021/09/19/example-app.html" rel="alternate" type="text/html" title="Example NodeJS Application" /><published>2021-09-19T00:00:00+00:00</published><updated>2021-09-19T00:00:00+00:00</updated><id>https://gregdaynes.com/post/2021/09/19/example-app</id><content type="html" xml:base="https://gregdaynes.com/post/2021/09/19/example-app.html"><![CDATA[<p><em>Note: While this is outdated, some of the takeaways are still valid. I hope to do a follow up - with the same idea using current proven practices and dependencies.</em></p>

<p>A <em>mostly</em> complete example for a monolith, which is also suitable for building “microservices”.</p>

<ul>
  <li>Mocha used as test runner for both the Api and the frontend (frontend excluded from this repository). I would personally choose to use <a href="https://www.npmjs.com/package/tap">tap</a> for the Api, and Jest for the Frontend. I dislike Jest for testing Node because of the changes made to the runtime. There are also issues with slow adoption of newer capabilities (because of the these changes)—eg: ESM</li>
  <li>Replacing the database with SQLite when testing has been a positive choice for fast development (TDD). Given the choice again I would opt to use an in-memory-tuned instance of the production database for integration testing.</li>
  <li>No workspaces. I ran into an issue with other developers NPM not working with the <em>then new</em> workspace feature (NPM @ 7). Yarn would have worked for this, as well as PNPM.</li>
  <li>Hygen for generating code based on <code class="language-plaintext highlighter-rouge">ejs</code> templates - <a href="https://www.npmjs.com/package/copy-template-dir">copy-template-dir</a> or similar.</li>
  <li>CLI came after most of the application and web interface was complete. Nowadays I would build the CLI in parallel with the application logic. This benefits development by not having to remember REPL commands or building out administration uis.</li>
</ul>

<p>The repository contains <code class="language-plaintext highlighter-rouge">app-example-requests.paw</code> and <code class="language-plaintext highlighter-rouge">app-example-requests-postman.json</code> for interacting with the api through Paw or Postman.</p>

<p>Repo: <a href="https://github.com/gregdaynes/app-example">app-example</a></p>

<p>Readme in repository has in-depth documentation on the organization, cli, code generation, testing, database.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install modules for each area of the application</span>
<span class="nv">$ </span>npm run setup

<span class="c"># Add required keyvalues to .env</span>
<span class="c"># starting the application will inform you what required values are missing</span>
<span class="c"># you can use the following</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>supersecret
<span class="nv">DB_CLIENT</span><span class="o">=</span>mysql
<span class="nv">DB_USER</span><span class="o">=</span>root
<span class="nv">DB_PASSWORD</span><span class="o">=</span>root
<span class="nv">DB_DATABASE</span><span class="o">=</span>app
<span class="nv">DB_HOST</span><span class="o">=</span>127.0.0.1
<span class="nv">DB_PORT</span><span class="o">=</span>3306
<span class="nv">TEST_DB_CLIENT</span><span class="o">=</span>sqlite3
<span class="nv">TEST_DB_FILENAME</span><span class="o">=</span>:memory:
<span class="nv">TEST_DB_POOL_MIN</span><span class="o">=</span>1
<span class="nv">TEST_DB_POOL_MAX</span><span class="o">=</span>1

<span class="c"># Setup Database</span>
<span class="c"># if you don't have a local MySQL install, you can use the docker compose file included in this project to set up quickly.</span>
<span class="c"># Note that the envars for MYSQL_ROOT_PASSWORD and MYSQL_DATABASE need to be defined in .env before running the following command.</span>
<span class="nv">$ </span>docker compose up <span class="nt">-d</span>

<span class="c"># Migrate + Seed database</span>
<span class="c"># you can use the script `db` to perform operations with KnexJS or use the CLI</span>
<span class="nv">$ </span>npm run cli

<span class="nv">$ </span>npm run db <span class="nt">--</span> migrate:latest
<span class="nv">$ </span>npm run db <span class="nt">--</span> seed:run

<span class="c"># Running API Server</span>
<span class="nv">$ </span>npm run start:api
<span class="c"># pino-pretty can provide cleaner stdout logs for dev</span>
<span class="nv">$ </span>npm run start:api | npx pino-pretty

<span class="c"># Running Tests</span>
<span class="c"># app tests</span>
<span class="nv">$ </span>npm run <span class="nb">test</span>:app
<span class="c"># api tests</span>
<span class="nv">$ </span>npm run <span class="nb">test</span>:api
<span class="c"># api &amp; app tests</span>
<span class="nv">$ </span>npm run <span class="nb">test</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[An example application in NodeJS]]></summary></entry><entry><title type="html">Composability with Entity-Component Systems</title><link href="https://gregdaynes.com/post/2021/09/18/entity-component-application.html" rel="alternate" type="text/html" title="Composability with Entity-Component Systems" /><published>2021-09-18T00:00:00+00:00</published><updated>2021-09-18T00:00:00+00:00</updated><id>https://gregdaynes.com/post/2021/09/18/entity-component-application</id><content type="html" xml:base="https://gregdaynes.com/post/2021/09/18/entity-component-application.html"><![CDATA[<p>This was an exploration of Entity-Component System pattern used in game development. I wanted to see if the pattern could help with legibility and composability.</p>

<p>Repo: <a href="https://github.com/gregdaynes/entity-component">gregdaynes/entity-component</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run application, stdout JSON data results</span>
<span class="nv">$ </span>npm start

<span class="c"># Run application with profiling data, stdout pretty JSON data &amp; performance metrics/telemetry</span>
<span class="nv">$ </span>npm run profile
</code></pre></div></div>

<p>While not as performant as the original implementation. EC proved to be a happy in-between performance and maintainability. I found it to be like <a href="/function-composition">Function Composition</a> as well as way more memory efficient (this is where EC proves it’s value).</p>

<p>The concept is for entites to act as containers of data with a global unique dentifier. The logic exists outside of the entities in systems. Each system operates on entities which have the components the system knows about. Usually a system performs arithmetic, which makes it fast and efficient.</p>

<p>This served as a place to experiment with the new <a href="https://nodejs.org/dist/latest-v16.x/docs/api/perf_hooks.html#perf_hooks_performance_measurement_apis">Performance Hooks</a> API.</p>

<ul>
  <li>Choosing to write this using Classes instead of Prototype, I found it to be more legible. Programmers coming from OOP languages like Ruby makes this easier to understand.</li>
  <li>For/of loops and if/else blocks are also used instead of collection methods like map/reduce. Ease for programmers of all levels to understand without Javascript collections knowledge. And keep me away from long method chains.</li>
  <li>Main loop which performs 100,000 frames (iterations) of systems over the entities - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/index.js#L60-L75">link</a></li>
  <li>Entity factory shows creation of entities with their components- <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/factory-ship.js">link</a></li>
  <li>Customizing entities with more components - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/index.js#L43-L50">link</a></li>
  <li>Entity Manager which maintains collections of entities and their components - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/lib/entity-manager.js">link</a></li>
  <li>Wrapper for perf hooks - <a href="https://github.com/gregdaynes/entity-component/blob/5a859c67f7e9ce161e10daefd38dd6d43378f8de/src/lib/perf.js">link</a></li>
</ul>

<p>I’m still exploring the posibile applications of an EC-like pattern outside of games.</p>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[This was an exploration of Entity-Component System pattern used in game development. I wanted to see if the pattern could help with legibility and composability.]]></summary></entry><entry><title type="html">Lazy Short URLs</title><link href="https://gregdaynes.com/post/2021/09/18/lazy-short-urls.html" rel="alternate" type="text/html" title="Lazy Short URLs" /><published>2021-09-18T00:00:00+00:00</published><updated>2021-09-18T00:00:00+00:00</updated><id>https://gregdaynes.com/post/2021/09/18/lazy-short-urls</id><content type="html" xml:base="https://gregdaynes.com/post/2021/09/18/lazy-short-urls.html"><![CDATA[<p>Recently when a friend was interviewing for a job, one of the code challenges was to create a url shortener. I decided to give it a try.</p>

<p>Repo: <a href="https://github.com/gregdaynes/shortr">gregdaynes/shortr</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run application web server on port 3000</span>
<span class="nv">$ </span>npm start
</code></pre></div></div>

<ul>
  <li>Encode the recieved url with HMAC from Node’s internal crypto library - <a href="https://github.com/gregdaynes/shortr/blob/492cb8fe770fef12ac8ca8f1c291413f3f0c82df/index.mjs#L36-L41">Link</a></li>
  <li>Append an entry <code class="language-plaintext highlighter-rouge">${hash}:${url}</code> to a plaintext file - <a href="https://github.com/gregdaynes/shortr/blob/492cb8fe770fef12ac8ca8f1c291413f3f0c82df/index.mjs#L47-L48">link</a></li>
  <li>Stores hash:url in a Set (Restored from the plaintext file on start) - <a href="https://github.com/gregdaynes/shortr/blob/492cb8fe770fef12ac8ca8f1c291413f3f0c82df/index.mjs#L7-L20">link</a></li>
</ul>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[Recently when a friend was interviewing for a job, one of the code challenges was to create a url shortener. I decided to give it a try.]]></summary></entry><entry><title type="html">Node CLI / Binary Artifacts</title><link href="https://gregdaynes.com/note/2021/09/18/node-binary-artifacts.html" rel="alternate" type="text/html" title="Node CLI / Binary Artifacts" /><published>2021-09-18T00:00:00+00:00</published><updated>2021-09-18T00:00:00+00:00</updated><id>https://gregdaynes.com/note/2021/09/18/node-binary-artifacts</id><content type="html" xml:base="https://gregdaynes.com/note/2021/09/18/node-binary-artifacts.html"><![CDATA[<p>A friend asked if it was possible to create binaries of a node application like Deno. I figured it would be a solved-problem, but didn’t realize how easy it would be. Using Vercel’s PKG package, it <em>just</em> works.</p>

<p><em>Note:</em> This repo currently does not compile or execute on M1 Macs. I haven’t bothered to investigate, but should be reasonable to resolve.</p>

<p><em>Note:</em> ESM is not supported. A rollup build step is required to convert ESM to CJS</p>

<p>Repo: <a href="https://github.com/gregdaynes/pkg-test">gregdaynes/pkg-test</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Build binaries
$ npm run build

# Run Binary
# ./pkg-test
</code></pre></div></div>]]></content><author><name></name></author><category term="note" /><summary type="html"><![CDATA[Building NodeJS apps into single-file binaries.]]></summary></entry></feed>